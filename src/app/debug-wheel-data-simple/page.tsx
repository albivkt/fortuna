'use client';

import { useState } from 'react';
import { useQuery } from '@apollo/client';
import { GET_WHEELS, GET_WHEEL } from '@/lib/graphql/queries';

export default function DebugWheelDataSimplePage() {
  const [selectedWheelId, setSelectedWheelId] = useState<string>('');
  const [logs, setLogs] = useState<string[]>([]);

  const { data: wheelsData, loading: wheelsLoading } = useQuery(GET_WHEELS);
  const { data: wheelData, loading: wheelLoading } = useQuery(GET_WHEEL, {
    variables: { id: selectedWheelId },
    skip: !selectedWheelId
  });

  const addLog = (message: string) => {
    console.log(message);
    setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const analyzeWheel = () => {
    if (!wheelData?.wheel) {
      addLog('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    const wheel = wheelData.wheel;
    addLog(`üé° –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—É–ª–µ—Ç–∫—É: ${wheel.title}`);
    addLog(`üÜî ID: ${wheel.id}`);
    addLog(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${wheel.user?.name || wheel.user?.email}`);
    addLog(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: ${wheel.segments?.length || 0}`);

    if (wheel.segments) {
      wheel.segments.forEach((segment: any, index: number) => {
        addLog(`üìù –°–µ–≥–º–µ–Ω—Ç ${index}:`);
        addLog(`  - –¢–µ–∫—Å—Ç: ${segment.option}`);
        addLog(`  - –¶–≤–µ—Ç: ${segment.style?.backgroundColor}`);
        addLog(`  - –ï—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${!!segment.image}`);
        if (segment.image) {
          addLog(`  - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${segment.image}`);
          addLog(`  - –î–ª–∏–Ω–∞ URL: ${segment.image.length}`);
          addLog(`  - –í–∞–ª–∏–¥–Ω—ã–π URL: ${segment.image.startsWith('https://')}`);
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const img = new Image();
          img.onload = () => {
            addLog(`  ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ ${index} –¥–æ—Å—Ç—É–ø–Ω–æ: ${img.width}x${img.height}`);
          };
          img.onerror = () => {
            addLog(`  ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ ${index} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ`);
          };
          img.src = segment.image;
        } else {
          addLog(`  - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
        
        if (segment.imagePosition) {
          addLog(`  - –ü–æ–∑–∏—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: x=${segment.imagePosition.x}, y=${segment.imagePosition.y}`);
        }
      });
    }

    if (wheel.customDesign) {
      addLog(`üé® –ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∑–∞–π–Ω:`);
      addLog(`  - –§–æ–Ω: ${wheel.customDesign.backgroundColor}`);
      addLog(`  - –ì—Ä–∞–Ω–∏—Ü–∞: ${wheel.customDesign.borderColor}`);
      addLog(`  - –¢–µ–∫—Å—Ç: ${wheel.customDesign.textColor}`);
      addLog(`  - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${wheel.customDesign.centerImage || '–Ω–µ—Ç'}`);
    }
  };

  const analyzeAllWheels = () => {
    if (!wheelsData?.wheels) {
      addLog('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    addLog(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ä—É–ª–µ—Ç–∫–∏ (${wheelsData.wheels.length})`);
    
    wheelsData.wheels.forEach((wheel: any, wheelIndex: number) => {
      addLog(`\nüé° –†—É–ª–µ—Ç–∫–∞ ${wheelIndex + 1}: ${wheel.title}`);
      addLog(`üÜî ID: ${wheel.id}`);
      
      const segmentsWithImages = wheel.segments?.filter((s: any) => s.image) || [];
      addLog(`üñºÔ∏è –°–µ–≥–º–µ–Ω—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${segmentsWithImages.length}/${wheel.segments?.length || 0}`);
      
      segmentsWithImages.forEach((segment: any, segIndex: number) => {
        addLog(`  üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${segIndex + 1}: ${segment.image.substring(0, 50)}...`);
      });
    });
  };

  return (
    <div className="container mx-auto p-8 max-w-6xl">
      <h1 className="text-3xl font-bold mb-8">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–∫–∏</h1>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <div className="space-y-6">
          {/* –í—ã–±–æ—Ä —Ä—É–ª–µ—Ç–∫–∏ */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–í—ã–±–æ—Ä —Ä—É–ª–µ—Ç–∫–∏</h2>
            
            {wheelsLoading ? (
              <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É–ª–µ—Ç–æ–∫...</p>
            ) : wheelsData?.wheels ? (
              <select
                value={selectedWheelId}
                onChange={(e) => setSelectedWheelId(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É</option>
                {wheelsData.wheels.map((wheel: any) => (
                  <option key={wheel.id} value={wheel.id}>
                    {wheel.title} (ID: {wheel.id})
                  </option>
                ))}
              </select>
            ) : (
              <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—É–ª–µ—Ç–æ–∫</p>
            )}
          </div>

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–î–µ–π—Å—Ç–≤–∏—è</h2>
            <div className="space-y-3">
              <button
                onClick={analyzeWheel}
                disabled={!selectedWheelId || wheelLoading}
                className="w-full bg-blue-500 text-white py-3 px-4 rounded hover:bg-blue-600 disabled:opacity-50"
              >
                –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä—É–ª–µ—Ç–∫—É
              </button>
              
              <button
                onClick={analyzeAllWheels}
                disabled={wheelsLoading}
                className="w-full bg-green-500 text-white py-3 px-4 rounded hover:bg-green-600 disabled:opacity-50"
              >
                –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ä—É–ª–µ—Ç–∫–∏
              </button>
              
              <button
                onClick={() => setLogs([])}
                className="w-full bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-600"
              >
                –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
              </button>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä—É–ª–µ—Ç–∫–µ */}
          {wheelData?.wheel && (
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h2 className="text-xl font-semibold mb-4">–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
              <div className="space-y-2 text-sm">
                <div><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {wheelData.wheel.title}</div>
                <div><strong>ID:</strong> {wheelData.wheel.id}</div>
                <div><strong>–°–µ–≥–º–µ–Ω—Ç–æ–≤:</strong> {wheelData.wheel.segments?.length || 0}</div>
                <div><strong>–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:</strong> {wheelData.wheel.segments?.filter((s: any) => s.image).length || 0}</div>
                <div><strong>–ü—É–±–ª–∏—á–Ω–∞—è:</strong> {wheelData.wheel.isPublic ? '–î–∞' : '–ù–µ—Ç'}</div>
              </div>
            </div>
          )}
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ª–æ–≥–∏ */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h2>
          <div className="bg-gray-100 rounded p-4 h-96 overflow-y-auto">
            {logs.length === 0 ? (
              <p className="text-gray-500 text-sm">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</p>
            ) : (
              <div className="space-y-1">
                {logs.map((log, index) => (
                  <div key={index} className="text-xs font-mono whitespace-pre-wrap">
                    {log}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
} 