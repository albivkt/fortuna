'use client';

import { useState, useEffect } from 'react';
import { CustomWheel } from '@/components/CustomWheel';

export default function TestProblemImagePage() {
  const [logs, setLogs] = useState<string[]>([]);
  const [mustSpin, setMustSpin] = useState(false);
  const [prizeNumber, setPrizeNumber] = useState(0);
  const [testResults, setTestResults] = useState<{
    direct: string;
    noCors: string;
    proxy: string;
  }>({
    direct: '–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ',
    noCors: '–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ', 
    proxy: '–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ'
  });

  // –ü—Ä–æ–±–ª–µ–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ—à–∏–±–∫–∏
  const problemImageUrl = 'https://s3.twcstorage.ru/617774af-gifty/wheel-images/1750680655099-pk24bh.png';

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  const [wheelData, setWheelData] = useState([
    { option: '–°–µ–≥–º–µ–Ω—Ç 1', style: { backgroundColor: '#ff6b6b', textColor: '#ffffff' }, image: problemImageUrl },
    { option: '–°–µ–≥–º–µ–Ω—Ç 2', style: { backgroundColor: '#4ecdc4', textColor: '#ffffff' } },
    { option: '–°–µ–≥–º–µ–Ω—Ç 3', style: { backgroundColor: '#45b7d1', textColor: '#ffffff' } },
    { option: '–°–µ–≥–º–µ–Ω—Ç 4', style: { backgroundColor: '#96ceb4', textColor: '#ffffff' } },
  ]);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    console.log(logMessage);
    setLogs(prev => [...prev, logMessage]);
  };

  const clearLogs = () => {
    setLogs([]);
    console.clear();
  };

  // –¢–µ—Å—Ç –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å CORS
  const testDirectLoad = () => {
    addLog('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å CORS...');
    
    const img = new Image();
    img.crossOrigin = 'anonymous';
    
    img.onload = () => {
      addLog(`‚úÖ –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å CORS —É—Å–ø–µ—à–Ω–∞: ${img.width}x${img.height}`);
      setTestResults(prev => ({ ...prev, direct: '‚úÖ –£—Å–ø–µ—Ö' }));
    };
    
    img.onerror = (error) => {
      addLog(`‚ùå –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å CORS –Ω–µ—É–¥–∞—á–Ω–∞`);
      console.log('Direct load error:', error);
      setTestResults(prev => ({ ...prev, direct: '‚ùå CORS –æ—à–∏–±–∫–∞' }));
    };
    
    img.src = problemImageUrl;
  };

  // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∑ CORS
  const testNoCorsLoad = () => {
    addLog('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–µ–∑ CORS...');
    
    const img = new Image();
    // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º crossOrigin
    
    img.onload = () => {
      addLog(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ CORS —É—Å–ø–µ—à–Ω–∞: ${img.width}x${img.height}`);
      addLog(`‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ Canvas)`);
      setTestResults(prev => ({ ...prev, noCors: '‚úÖ –£—Å–ø–µ—Ö (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)' }));
    };
    
    img.onerror = (error) => {
      addLog(`‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ CORS –Ω–µ—É–¥–∞—á–Ω–∞`);
      console.log('No CORS load error:', error);
      setTestResults(prev => ({ ...prev, noCors: '‚ùå –û—à–∏–±–∫–∞' }));
    };
    
    img.src = problemImageUrl;
  };

  // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
  const testProxyLoad = () => {
    addLog('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ API...');
    
    const proxyUrl = `/api/proxy-image?url=${encodeURIComponent(problemImageUrl)}`;
    addLog(`üîó –ü—Ä–æ–∫—Å–∏ URL: ${proxyUrl}`);
    
    const img = new Image();
    img.crossOrigin = 'anonymous'; // –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
    
    img.onload = () => {
      addLog(`‚úÖ –ü—Ä–æ–∫—Å–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞: ${img.width}x${img.height}`);
      addLog(`üéâ –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!`);
      setTestResults(prev => ({ ...prev, proxy: '‚úÖ –£—Å–ø–µ—Ö (–ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)' }));
    };
    
    img.onerror = (error) => {
      addLog(`‚ùå –ü—Ä–æ–∫—Å–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞`);
      console.log('Proxy load error:', error);
      setTestResults(prev => ({ ...prev, proxy: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏' }));
    };
    
    img.src = proxyUrl;
  };

  // –¢–µ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ —Å—Ä–∞–∑—É
  const testAllMethods = () => {
    clearLogs();
    addLog('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    addLog(`üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π URL: ${problemImageUrl}`);
    
    setTimeout(() => testDirectLoad(), 100);
    setTimeout(() => testNoCorsLoad(), 1000);
    setTimeout(() => testProxyLoad(), 2000);
  };

  const handleSpin = () => {
    if (!mustSpin) {
      const newPrizeNumber = Math.floor(Math.random() * wheelData.length);
      setPrizeNumber(newPrizeNumber);
      setMustSpin(true);
      addLog(`üé≤ –ó–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏, –≤—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç: ${newPrizeNumber}`);
    }
  };

  const handleStopSpinning = () => {
    setMustSpin(false);
    addLog(`üéâ –†—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –Ω–∞: ${wheelData[prizeNumber]?.option}`);
  };

  const toggleProblemImage = () => {
    setWheelData(prev => prev.map((item, index) => 
      index === 0 
        ? { ...item, image: item.image ? undefined : problemImageUrl }
        : item
    ));
    addLog(wheelData[0].image ? '–£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : '–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    setTimeout(() => {
      addLog('üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç...');
      testAllMethods();
    }, 1000);
  }, []);

  return (
    <div className="container mx-auto p-8 max-w-7xl">
      <h1 className="text-3xl font-bold mb-8 text-center">–¢–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h1>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏</h2>
            
            <div className="space-y-3 text-sm">
              <div><strong>URL:</strong></div>
              <div className="p-2 bg-gray-100 rounded break-all text-xs">
                {problemImageUrl}
              </div>
              
              <div><strong>–î–æ–º–µ–Ω:</strong> s3.twcstorage.ru</div>
              <div><strong>–¢–∏–ø:</strong> PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</div>
              <div><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ</div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–¢–µ—Å—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏</h2>
            
            <div className="space-y-3">
              <button
                onClick={testDirectLoad}
                className="w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600"
              >
                –¢–µ—Å—Ç —Å CORS
              </button>
              
              <button
                onClick={testNoCorsLoad}
                className="w-full bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600"
              >
                –¢–µ—Å—Ç –±–µ–∑ CORS
              </button>
              
              <button
                onClick={testProxyLoad}
                className="w-full bg-purple-500 text-white py-2 px-4 rounded-lg hover:bg-purple-600"
              >
                –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
              </button>
              
              <button
                onClick={testAllMethods}
                className="w-full bg-orange-500 text-white py-2 px-4 rounded-lg hover:bg-orange-600"
              >
                –¢–µ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
              </button>
              
              <button
                onClick={toggleProblemImage}
                className="w-full bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600"
              >
                {wheelData[0].image ? '–£–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : '–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
              </button>
              
              <button
                onClick={clearLogs}
                className="w-full bg-gray-500 text-white py-2 px-4 rounded-lg hover:bg-gray-600"
              >
                –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
              </button>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h2>
            
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>–ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (CORS):</span>
                <span className={testResults.direct.includes('‚úÖ') ? 'text-green-600' : 'text-red-600'}>
                  {testResults.direct}
                </span>
              </div>
              <div className="flex justify-between">
                <span>–ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ CORS:</span>
                <span className={testResults.noCors.includes('‚úÖ') ? 'text-green-600' : 'text-red-600'}>
                  {testResults.noCors}
                </span>
              </div>
              <div className="flex justify-between">
                <span>–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:</span>
                <span className={testResults.proxy.includes('‚úÖ') ? 'text-green-600' : 'text-red-600'}>
                  {testResults.proxy}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* –°—Ä–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - —Ä—É–ª–µ—Ç–∫–∞ */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4">–¢–µ—Å—Ç —Ä—É–ª–µ—Ç–∫–∏</h2>
          
          <div className="flex flex-col items-center space-y-4">
            <CustomWheel
              mustStartSpinning={mustSpin}
              prizeNumber={prizeNumber}
              data={wheelData}
              onStopSpinning={handleStopSpinning}
              size="medium"
            />
            
            <button
              onClick={handleSpin}
              disabled={mustSpin}
              className={`px-6 py-3 rounded-lg font-semibold ${
                mustSpin 
                  ? 'bg-gray-400 text-gray-600 cursor-not-allowed' 
                  : 'bg-blue-500 text-white hover:bg-blue-600'
              }`}
            >
              {mustSpin ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É'}
            </button>
            
            <div className="text-center">
              <div className="text-sm text-gray-600">
                –°–µ–≥–º–µ–Ω—Ç—ã: {wheelData.length} | 
                –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {wheelData.filter(s => s.image).length}
              </div>
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ª–æ–≥–∏ */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4">–õ–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
          
          <div className="h-96 overflow-y-auto bg-gray-50 p-4 rounded border text-xs font-mono">
            {logs.length === 0 ? (
              <div className="text-gray-500">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</div>
            ) : (
              logs.map((log, index) => (
                <div key={index} className="mb-1">
                  {log}
                </div>
              ))
            )}
          </div>
        </div>
      </div>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6">
        <h2 className="text-xl font-semibold mb-4 text-blue-800">–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º</h2>
        <div className="space-y-2 text-sm text-blue-700">
          <div><strong>üîÑ –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å CORS:</strong> –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</div>
          <div><strong>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ CORS:</strong> –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –±–µ–∑ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤</div>
          <div><strong>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:</strong> –û–±—Ö–æ–¥ CORS —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–∫—Å–∏ API</div>
          <div><strong>üé≤ –¢–µ—Å—Ç —Ä—É–ª–µ—Ç–∫–∏:</strong> –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ CustomWheel</div>
          <div><strong>üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏</div>
        </div>
      </div>
    </div>
  );
} 