'use client';

import { useState, useEffect } from 'react';
import { useCreateWheel, useWheels } from '@/lib/graphql/hooks';
import { apolloClient } from '@/lib/graphql/client';

export default function TestSessionPage() {
  const [sessionInfo, setSessionInfo] = useState<any>(null);
  const [testResult, setTestResult] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  
  const { data: wheelsData, loading: wheelsLoading, refetch } = useWheels();
  const [createWheel] = useCreateWheel();

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
    if (typeof window !== 'undefined') {
      const sessionId = localStorage.getItem('fortuna_session_id');
      const authToken = localStorage.getItem('auth_token');
      
      setSessionInfo({
        sessionId,
        authToken,
        expectedEmail: sessionId ? `temp_${sessionId}@fortuna.local` : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
      });
    }
  }, []);

  const handleCreateTestWheel = async () => {
    setIsLoading(true);
    setTestResult('');
    
    try {
      console.log('üé° –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä—É–ª–µ—Ç–∫–∏...');
      console.log('üîê Session info before create:', {
        sessionId: localStorage.getItem('fortuna_session_id'),
        authToken: localStorage.getItem('auth_token')
      });
      
      const sessionId = localStorage.getItem('fortuna_session_id');
      console.log('üîó Sending session ID:', sessionId);
      
      const result = await createWheel({
        variables: {
          input: {
            title: `–¢–µ—Å—Ç ${Date.now()}`,
            description: '–¢–µ—Å—Ç–æ–≤–∞—è —Ä—É–ª–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ session ID',
            segments: [
              { 
                option: '–ü—Ä–∏–∑ 1', 
                style: { backgroundColor: '#FF6B6B', textColor: '#FFFFFF' }
              },
              { 
                option: '–ü—Ä–∏–∑ 2', 
                style: { backgroundColor: '#4ECDC4', textColor: '#FFFFFF' }
              },
              { 
                option: '–ü—Ä–∏–∑ 3', 
                style: { backgroundColor: '#45B7D1', textColor: '#FFFFFF' }
              }
            ],
            isPublic: false
          }
        },
        context: {
          headers: {
            'x-session-id': sessionId,
            'X-Session-Id': sessionId,
          }
        }
      });
      
      console.log('‚úÖ –†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', result.data?.createWheel);
      console.log('üîç Full result object:', result);
      console.log('üîç Result data:', result.data);
      console.log('üîç Result errors:', result.errors);
      
      if (result.data?.createWheel) {
        setTestResult(`‚úÖ –†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${result.data.createWheel.title} (ID: ${result.data.createWheel.id})`);
      } else {
        setTestResult(`‚ö†Ô∏è –†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. Errors: ${JSON.stringify(result.errors)}`);
      }
      
      // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è...');
      setTimeout(async () => {
        console.log('üîê Session info before refetch:', {
          sessionId: localStorage.getItem('fortuna_session_id'),
          authToken: localStorage.getItem('auth_token')
        });
        
        const refetchResult = await refetch();
        console.log('üìä Refetch result:', refetchResult);
        console.log('üé° Wheels after refetch:', refetchResult.data?.wheels?.length || 0);
        
        if (!refetchResult.data?.wheels) {
          setTestResult(prev => prev + '\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä—É–ª–µ—Ç–æ–∫');
        } else if (refetchResult.data.wheels.length === 0) {
          setTestResult(prev => prev + '\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ!');
        } else {
          setTestResult(prev => prev + `\n‚úÖ –†—É–ª–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ! –í—Å–µ–≥–æ: ${refetchResult.data.wheels.length}`);
        }
      }, 1000);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏:', error);
      setTestResult(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleClearSession = () => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem('fortuna_session_id');
      localStorage.removeItem('auth_token');
      apolloClient.clearStore();
      window.location.reload();
    }
  };

  const handleResetSession = () => {
    if (typeof window !== 'undefined') {
      const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      localStorage.setItem('fortuna_session_id', newSessionId);
      localStorage.removeItem('auth_token');
      apolloClient.clearStore();
      window.location.reload();
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">–¢–µ—Å—Ç Session ID</h1>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ */}
        <div className="bg-white p-6 rounded-lg shadow mb-6">
          <h2 className="text-xl font-semibold mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏</h2>
          <div className="space-y-2 font-mono text-sm">
            <div><strong>Session ID:</strong> {sessionInfo?.sessionId || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</div>
            <div><strong>Auth Token:</strong> {sessionInfo?.authToken || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</div>
            <div><strong>–û–∂–∏–¥–∞–µ–º—ã–π Email:</strong> {sessionInfo?.expectedEmail}</div>
          </div>
          
          <div className="mt-4 space-x-4">
            <button
              onClick={handleResetSession}
              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
            >
              üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é
            </button>
            <button
              onClick={handleClearSession}
              className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
            >
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é
            </button>
          </div>
        </div>

        {/* –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏ */}
        <div className="bg-white p-6 rounded-lg shadow mb-6">
          <h2 className="text-xl font-semibold mb-4">–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏</h2>
          
          <button
            onClick={handleCreateTestWheel}
            disabled={isLoading}
            className="bg-green-500 text-white px-6 py-3 rounded hover:bg-green-600 disabled:opacity-50"
          >
            {isLoading ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...' : 'üé° –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É'}
          </button>
          
          <button
            onClick={async () => {
              console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä—É–ª–µ—Ç–æ–∫...');
              apolloClient.clearStore();
              const result = await refetch();
              console.log('üìä Force refetch result:', result);
              setTestResult(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω–æ ${result.data?.wheels?.length || 0} —Ä—É–ª–µ—Ç–æ–∫`);
            }}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 ml-4"
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
          </button>
          
          {testResult && (
            <div className="mt-4 p-4 bg-gray-100 rounded">
              <pre className="text-sm">{testResult}</pre>
            </div>
          )}
        </div>

        {/* –°–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫ */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">–ú–æ–∏ —Ä—É–ª–µ—Ç–∫–∏</h2>
          
          {wheelsLoading ? (
            <div className="text-center py-4">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
              <p className="mt-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
            </div>
          ) : (
            <div>
              <p className="mb-4">–í—Å–µ–≥–æ —Ä—É–ª–µ—Ç–æ–∫: {wheelsData?.wheels?.length || 0}</p>
              
              {!wheelsData?.wheels ? (
                <p className="text-red-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—É–ª–µ—Ç–æ–∫</p>
              ) : wheelsData.wheels.length === 0 ? (
                <p className="text-gray-600">–†—É–ª–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              ) : (
                <div className="space-y-2">
                  {wheelsData.wheels.map((wheel: any) => (
                    <div key={wheel.id} className="p-3 bg-gray-50 rounded">
                      <div className="font-medium">{wheel.title}</div>
                      <div className="text-sm text-gray-600">ID: {wheel.id}</div>
                      <div className="text-sm text-gray-600">–°–æ–∑–¥–∞–Ω–∞: {new Date(wheel.createdAt).toLocaleString('ru-RU')}</div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
} 