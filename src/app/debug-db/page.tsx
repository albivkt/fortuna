'use client';

import { useState, useEffect } from 'react';
import { apolloClient } from '@/lib/graphql/client';
import { gql } from '@apollo/client';

const GET_ALL_DATA = gql`
  query GetAllData {
    wheels {
      id
      title
      createdAt
      user {
        id
        name
        email
      }
      segments {
        option
        style {
          backgroundColor
          textColor
        }
      }
    }
  }
`;

export default function DebugDbPage() {
  const [data, setData] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [sessionInfo, setSessionInfo] = useState<any>({});

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
    if (typeof window !== 'undefined') {
      const sessionId = localStorage.getItem('fortuna_session_id');
      const authToken = localStorage.getItem('auth_token');
      setSessionInfo({
        sessionId,
        authToken,
        hasSession: !!sessionId,
        hasAuth: !!authToken
      });
    }
  }, []);

  const fetchData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('üîç –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
      const result = await apolloClient.query({
        query: GET_ALL_DATA,
        fetchPolicy: 'network-only' // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
      });
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', result);
      setData(result.data);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', err);
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  const createTestWheel = async () => {
    try {
      console.log('üé° –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä—É–ª–µ—Ç–∫–∏...');
      
      const CREATE_WHEEL = gql`
        mutation CreateTestWheel($input: CreateWheelInput!) {
          createWheel(input: $input) {
            id
            title
            createdAt
            user {
              id
              name
              email
            }
          }
        }
      `;

      const result = await apolloClient.mutate({
        mutation: CREATE_WHEEL,
        variables: {
          input: {
            title: `–¢–µ—Å—Ç–æ–≤–∞—è —Ä—É–ª–µ—Ç–∫–∞ ${Date.now()}`,
            segments: [
              { option: '–ü—Ä–∏–∑ 1', style: { backgroundColor: '#EC4899', textColor: 'white' } },
              { option: '–ü—Ä–∏–∑ 2', style: { backgroundColor: '#3B82F6', textColor: 'white' } }
            ],
            isPublic: false
          }
        }
      });

      console.log('‚úÖ –†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', result);
      alert('–†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', err);
      alert('–û—à–∏–±–∫–∞: ' + (err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  return (
    <div className="p-8 max-w-6xl mx-auto">
      <h1 className="text-3xl font-bold mb-6">–û—Ç–ª–∞–¥–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h1>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ */}
      <div className="bg-gray-100 p-4 rounded-lg mb-6">
        <h2 className="text-xl font-semibold mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏</h2>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>Session ID:</strong></p>
            <p className="font-mono text-xs break-all">{sessionInfo.sessionId || '–ù–µ—Ç'}</p>
          </div>
          <div>
            <p><strong>Auth Token:</strong></p>
            <p className="font-mono text-xs break-all">{sessionInfo.authToken || '–ù–µ—Ç'}</p>
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex gap-4 mb-6">
        <button
          onClick={fetchData}
          disabled={loading}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
        >
          {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ'}
        </button>
        
        <button
          onClick={createTestWheel}
          className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
        >
          –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É
        </button>
      </div>

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          <strong>–û—à–∏–±–∫–∞:</strong> {error}
        </div>
      )}

      {/* –î–∞–Ω–Ω—ã–µ */}
      {data && (
        <div className="space-y-6">
          <div className="bg-white border rounded-lg p-4">
            <h2 className="text-xl font-semibold mb-4">
              –í—Å–µ —Ä—É–ª–µ—Ç–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ({data.wheels?.length || 0})
            </h2>
            
            {data.wheels?.length === 0 ? (
              <p className="text-gray-500">–†—É–ª–µ—Ç–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç</p>
            ) : (
              <div className="space-y-4">
                {data.wheels?.map((wheel: any, index: number) => (
                  <div key={wheel.id} className="border rounded p-4 bg-gray-50">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <h3 className="font-semibold text-lg">{wheel.title}</h3>
                        <p className="text-sm text-gray-600">
                          ID: <span className="font-mono">{wheel.id}</span>
                        </p>
                        <p className="text-sm text-gray-600">
                          –°–æ–∑–¥–∞–Ω–∞: {new Date(wheel.createdAt).toLocaleString('ru-RU')}
                        </p>
                        <p className="text-sm text-gray-600">
                          –°–µ–≥–º–µ–Ω—Ç–æ–≤: {wheel.segments?.length || 0}
                        </p>
                      </div>
                      
                      <div>
                        <h4 className="font-medium mb-2">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</h4>
                        <p className="text-sm">
                          <strong>ID:</strong> <span className="font-mono">{wheel.user.id}</span>
                        </p>
                        <p className="text-sm">
                          <strong>–ò–º—è:</strong> {wheel.user.name}
                        </p>
                        <p className="text-sm">
                          <strong>Email:</strong> <span className="font-mono">{wheel.user.email}</span>
                        </p>
                      </div>
                    </div>
                    
                    {wheel.segments && wheel.segments.length > 0 && (
                      <div className="mt-3">
                        <h4 className="font-medium mb-2">–°–µ–≥–º–µ–Ω—Ç—ã:</h4>
                        <div className="flex flex-wrap gap-2">
                          {wheel.segments.map((segment: any, segIndex: number) => (
                            <span
                              key={segIndex}
                              className="px-2 py-1 rounded text-sm"
                              style={{
                                backgroundColor: segment.style.backgroundColor,
                                color: segment.style.textColor
                              }}
                            >
                              {segment.option}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* Raw –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ */}
      {data && (
        <div className="bg-gray-900 text-green-400 p-4 rounded font-mono text-sm">
          <h3 className="text-white mb-2">Raw –¥–∞–Ω–Ω—ã–µ (JSON):</h3>
          <pre className="whitespace-pre-wrap overflow-auto max-h-96">
            {JSON.stringify(data, null, 2)}
          </pre>
        </div>
      )}
    </div>
  );
} 