'use client';

import { useState, useEffect } from 'react';
import { useCreateWheel, useWheels } from '@/lib/graphql/hooks';
import Link from 'next/link';

export default function TestFullFlowPage() {
  const [createWheel, { loading: creating, error: createError }] = useCreateWheel();
  const { data: wheelsData, loading: wheelsLoading, error: wheelsError, refetch } = useWheels();
  const [title, setTitle] = useState('');
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [`[${timestamp}] ${message}`, ...prev]);
    console.log(message);
  };

  useEffect(() => {
    addLog('üöÄ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
    addLog(`üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${wheelsData?.wheels.length || 0} —Ä—É–ª–µ—Ç–æ–∫`);
  }, []);

  useEffect(() => {
    if (wheelsData) {
      addLog(`üìä –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫: ${wheelsData.wheels.length} —à—Ç—É–∫`);
    }
  }, [wheelsData]);

  const handleCreate = async () => {
    if (!title.trim()) {
      addLog('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }

    addLog(`üé° –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏: "${title}"`);
    
    try {
      const result = await createWheel({
        variables: {
          input: {
            title: title,
            segments: [
              { option: '–ü—Ä–∏–∑ 1', style: { backgroundColor: '#EC4899', textColor: 'white' } },
              { option: '–ü—Ä–∏–∑ 2', style: { backgroundColor: '#3B82F6', textColor: 'white' } },
              { option: '–ü—Ä–∏–∑ 3', style: { backgroundColor: '#10B981', textColor: 'white' } }
            ],
            isPublic: false
          }
        }
      });

      addLog(`‚úÖ GraphQL –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω`);
      
      if (result.data?.createWheel) {
        addLog(`üéâ –†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID=${result.data.createWheel.id}, Title="${result.data.createWheel.title}"`);
        setTitle(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
      } else {
        addLog(`‚ùå –†—É–ª–µ—Ç–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
      }

      if (result.errors) {
        addLog(`‚ö†Ô∏è GraphQL –æ—à–∏–±–∫–∏: ${result.errors.map(e => e.message).join(', ')}`);
      }
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };

  const handleRefresh = () => {
    addLog('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä—É–ª–µ—Ç–æ–∫');
    refetch();
  };

  const clearLogs = () => {
    setLogs([]);
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold mb-6">–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–ª–µ—Ç–æ–∫</h1>
        
        <div className="grid lg:grid-cols-2 gap-6">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –°–æ–∑–¥–∞–Ω–∏–µ */}
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-xl font-semibold mb-4">–°–æ–∑–¥–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏</h2>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
                  <input
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    className="w-full border border-gray-300 rounded px-3 py-2"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏"
                  />
                </div>
                
                <button
                  onClick={handleCreate}
                  disabled={creating || !title.trim()}
                  className="w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 disabled:opacity-50"
                >
                  {creating ? '–°–æ–∑–¥–∞–µ—Ç—Å—è...' : '–°–æ–∑–¥–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É'}
                </button>
                
                {createError && (
                  <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                    <strong>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> {createError.message}
                  </div>
                )}
              </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫ */}
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold">–ú–æ–∏ —Ä—É–ª–µ—Ç–∫–∏ ({wheelsData?.wheels.length || 0})</h2>
                <button
                  onClick={handleRefresh}
                  disabled={wheelsLoading}
                  className="bg-gray-500 text-white px-3 py-1 rounded text-sm hover:bg-gray-600 disabled:opacity-50"
                >
                  {wheelsLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
                </button>
              </div>
              
              {wheelsError && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                  <strong>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</strong> {wheelsError.message}
                </div>
              )}
              
              {wheelsLoading ? (
                <p className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É–ª–µ—Ç–æ–∫...</p>
              ) : wheelsData?.wheels.length === 0 ? (
                <p className="text-gray-500">–†—É–ª–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!</p>
              ) : (
                <div className="space-y-3 max-h-96 overflow-y-auto">
                  {wheelsData?.wheels.map((wheel, index) => (
                    <div key={wheel.id} className="border rounded p-3 bg-gray-50">
                      <div className="flex justify-between items-start">
                        <div>
                          <h3 className="font-medium">{wheel.title}</h3>
                          <p className="text-sm text-gray-600">
                            –°–æ–∑–¥–∞–Ω–∞: {new Date(wheel.createdAt).toLocaleString('ru-RU')}
                          </p>
                          <p className="text-sm text-gray-600">
                            –°–µ–≥–º–µ–Ω—Ç–æ–≤: {wheel.segments.length}
                          </p>
                          <p className="text-xs text-gray-500">ID: {wheel.id}</p>
                        </div>
                        <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
                          #{index + 1}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –õ–æ–≥–∏ */}
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">–õ–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏</h2>
              <button
                onClick={clearLogs}
                className="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600"
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </button>
            </div>
            
            <div className="bg-gray-900 text-green-400 p-4 rounded font-mono text-sm h-96 overflow-y-auto">
              {logs.length === 0 ? (
                <p className="text-gray-500">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</p>
              ) : (
                logs.map((log, index) => (
                  <div key={index} className="mb-1">
                    {log}
                  </div>
                ))
              )}
            </div>
          </div>
        </div>

        <div className="mt-6 text-center">
          <Link href="/dashboard" className="text-blue-500 hover:underline mr-4">
            ‚Üê –î–∞—à–±–æ—Ä–¥
          </Link>
          <Link href="/dashboard/create" className="text-blue-500 hover:underline">
            –°–æ–∑–¥–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É ‚Üí
          </Link>
        </div>
      </div>
    </div>
  );
} 