'use client';

import { useState } from 'react';
import { useMe } from '@/lib/graphql/hooks';
import { useMutation } from '@apollo/client';
import { CREATE_PAYMENT } from '@/lib/graphql/queries';

export default function DebugPaymentPage() {
  const [result, setResult] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const { data: meData, refetch: refetchMe } = useMe();
  
  const [createPayment] = useMutation(CREATE_PAYMENT);

  const testWebhook = async () => {
    setLoading(true);
    setResult('');
    
    if (!meData?.me?.id) {
      setResult('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      setLoading(false);
      return;
    }

    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º webhook –æ—Ç –ÆKassa
      const testWebhookData = {
        type: 'notification',
        event: 'payment.succeeded',
        object: {
          id: `test-payment-${Date.now()}`,
          status: 'succeeded',
          amount: {
            value: '400.00',
            currency: 'RUB'
          },
          metadata: {
            userId: meData.me.id,
            plan: 'PRO',
            period: 'MONTHLY',
            userEmail: meData.me.email || 'test@example.com'
          }
        }
      };

      console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π webhook:', testWebhookData);

      const response = await fetch('/api/yookassa/webhook', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testWebhookData)
      });

      const responseText = await response.text();
      console.log('üìã –û—Ç–≤–µ—Ç webhook:', responseText);

      if (response.ok) {
        setResult('‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n' + responseText);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setTimeout(async () => {
          await refetchMe();
          const updatedData = await refetchMe();
          console.log('üë§ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', updatedData?.data?.me);
          
          if (updatedData?.data?.me?.plan === 'PRO') {
            setResult(prev => prev + '\n\n‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ PRO –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!');
          } else {
            setResult(prev => prev + '\n\n‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞—Å—å. –ü–ª–∞–Ω: ' + updatedData?.data?.me?.plan);
          }
        }, 1000);
      } else {
        setResult('‚ùå –û—à–∏–±–∫–∞ webhook: ' + response.status + '\n' + responseText);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      setResult('‚ùå –û—à–∏–±–∫–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
    
    setLoading(false);
  };

  const testGraphQLPayment = async () => {
    setLoading(true);
    try {
      console.log('üîÑ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ GraphQL...');
      
      const response = await createPayment({
        variables: { period: 'MONTHLY' }
      });
      
      console.log('üìã GraphQL –æ—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', response);
      
      if (response.data?.createPayment) {
        setResult('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ GraphQL!\n' + JSON.stringify(response.data.createPayment, null, 2));
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ GraphQL –ø–ª–∞—Ç–µ–∂–∞:', error);
      setResult('‚ùå –û—à–∏–±–∫–∞ GraphQL –ø–ª–∞—Ç–µ–∂–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
    setLoading(false);
  };

  const manualUpgrade = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/graphql', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          query: `mutation { upgradeToPro(period: "MONTHLY") { id plan status amount } }`
        })
      });
      
      const data = await response.json();
      console.log('üìã GraphQL –æ—Ç–≤–µ—Ç:', data);
      
      if (data.data?.upgradeToPro) {
        setResult('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ GraphQL!\n' + JSON.stringify(data.data.upgradeToPro, null, 2));
        await refetchMe();
      } else {
        setResult('‚ùå –û—à–∏–±–∫–∞ GraphQL: ' + JSON.stringify(data.errors || data, null, 2));
      }
    } catch (error) {
      setResult('‚ùå –û—à–∏–±–∫–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-8">üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π</h1>
        
        <div className="bg-gray-800 p-6 rounded-lg mb-6">
          <h2 className="text-xl font-bold mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</h2>
          <div className="space-y-2 text-gray-300">
            <p><strong>ID:</strong> {meData?.me?.id || '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}</p>
            <p><strong>Email:</strong> {meData?.me?.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
            <p><strong>–ü–ª–∞–Ω:</strong> {meData?.me?.plan || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
            <p><strong>–ò—Å—Ç–µ–∫–∞–µ—Ç:</strong> {meData?.me?.planExpiresAt ? new Date(meData.me.planExpiresAt).toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
          </div>
        </div>

        <div className="grid md:grid-cols-3 gap-4 mb-6">
          <button
            onClick={testWebhook}
            disabled={loading || !meData?.me?.id}
            className="bg-blue-600 hover:bg-blue-700 px-6 py-3 rounded-lg font-medium disabled:opacity-50"
          >
            {loading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : 'üß™ –¢–µ—Å—Ç Webhook'}
          </button>

          <button
            onClick={testGraphQLPayment}
            disabled={loading || !meData?.me?.id}
            className="bg-purple-600 hover:bg-purple-700 px-6 py-3 rounded-lg font-medium disabled:opacity-50"
          >
            {loading ? '–°–æ–∑–¥–∞–µ–º...' : 'üöÄ GraphQL –ü–ª–∞—Ç–µ–∂'}
          </button>

          <button
            onClick={manualUpgrade}
            disabled={loading || !meData?.me?.id}
            className="bg-green-600 hover:bg-green-700 px-6 py-3 rounded-lg font-medium disabled:opacity-50"
          >
            {loading ? '–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º...' : '‚ö° –†—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è'}
          </button>
        </div>

        {result && (
          <div className="bg-gray-800 p-4 rounded-lg">
            <h2 className="text-xl font-bold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç:</h2>
            <pre className="text-sm overflow-auto whitespace-pre-wrap">
              {result}
            </pre>
          </div>
        )}

        <div className="mt-8 bg-gray-800 p-6 rounded-lg">
          <h2 className="text-xl font-bold mb-4">–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:</h2>
          <ul className="space-y-2 text-gray-300">
            <li>‚Ä¢ <strong>Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</strong> - –ÆKassa –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</li>
            <li>‚Ä¢ <strong>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL</strong> - webhook URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ÆKassa</li>
            <li>‚Ä¢ <strong>–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö</strong> - userId –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π</li>
            <li>‚Ä¢ <strong>–ü—Ä–æ–±–ª–µ–º–∞ —Å –ë–î</strong> - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</li>
            <li>‚Ä¢ <strong>–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º</strong> - webhook –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ</li>
          </ul>
        </div>

        <div className="mt-6 bg-yellow-900/20 border border-yellow-600/30 p-4 rounded-lg">
          <h3 className="text-yellow-300 font-bold mb-2">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>
          <ul className="space-y-1 text-yellow-200 text-sm">
            <li>1. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ "–¢–µ—Å—Ç Webhook" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏</li>
            <li>2. –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ÆKassa</li>
            <li>3. –ï—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ webhook'–∞</li>
            <li>4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–†—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è" –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</li>
          </ul>
        </div>
      </div>
    </div>
  );
}