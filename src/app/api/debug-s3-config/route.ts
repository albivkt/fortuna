import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º S3 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const config = {
      S3_REGION: process.env.S3_REGION,
      S3_BUCKET: process.env.S3_BUCKET,
      S3_ACCESS_KEY_ID: process.env.S3_ACCESS_KEY_ID,
      S3_SECRET_ACCESS_KEY: process.env.S3_SECRET_ACCESS_KEY,
      S3_ENDPOINT: process.env.S3_ENDPOINT,
    };

    console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è S3:', {
      S3_REGION: config.S3_REGION ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
      S3_BUCKET: config.S3_BUCKET ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
      S3_ACCESS_KEY_ID: config.S3_ACCESS_KEY_ID ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
      S3_SECRET_ACCESS_KEY: config.S3_SECRET_ACCESS_KEY ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
      S3_ENDPOINT: config.S3_ENDPOINT ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    const missingVars = [];
    if (!config.S3_REGION) missingVars.push('S3_REGION');
    if (!config.S3_BUCKET) missingVars.push('S3_BUCKET');
    if (!config.S3_ACCESS_KEY_ID) missingVars.push('S3_ACCESS_KEY_ID');
    if (!config.S3_SECRET_ACCESS_KEY) missingVars.push('S3_SECRET_ACCESS_KEY');
    if (!config.S3_ENDPOINT) missingVars.push('S3_ENDPOINT');

    if (missingVars.length > 0) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingVars);
      return NextResponse.json({
        success: false,
        error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingVars.join(', ')}`,
        missingVariables: missingVars,
        config: {
          S3_REGION: config.S3_REGION ? 'SET' : 'MISSING',
          S3_BUCKET: config.S3_BUCKET ? 'SET' : 'MISSING',
          S3_ACCESS_KEY_ID: config.S3_ACCESS_KEY_ID ? 'SET' : 'MISSING',
          S3_SECRET_ACCESS_KEY: config.S3_SECRET_ACCESS_KEY ? 'SET' : 'MISSING',
          S3_ENDPOINT: config.S3_ENDPOINT ? 'SET' : 'MISSING',
        }
      });
    }

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å S3 –∫–ª–∏–µ–Ω—Ç
    try {
      const { S3Client } = await import('@aws-sdk/client-s3');
      
      const s3Client = new S3Client({
        region: config.S3_REGION,
        endpoint: config.S3_ENDPOINT,
        credentials: {
          accessKeyId: config.S3_ACCESS_KEY_ID!,
          secretAccessKey: config.S3_SECRET_ACCESS_KEY!,
        },
        forcePathStyle: true,
      });

      console.log('‚úÖ S3 –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

      // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ bucket (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞, –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
      return NextResponse.json({
        success: true,
        message: 'S3 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞',
        config: {
          S3_REGION: config.S3_REGION,
          S3_BUCKET: config.S3_BUCKET,
          S3_ENDPOINT: config.S3_ENDPOINT,
          S3_ACCESS_KEY_ID: config.S3_ACCESS_KEY_ID?.substring(0, 8) + '***',
          S3_SECRET_ACCESS_KEY: '***',
        },
        clientCreated: true
      });

    } catch (s3Error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞:', s3Error);
      return NextResponse.json({
        success: false,
        error: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞: ${s3Error instanceof Error ? s3Error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        config: {
          S3_REGION: config.S3_REGION,
          S3_BUCKET: config.S3_BUCKET,
          S3_ENDPOINT: config.S3_ENDPOINT,
          S3_ACCESS_KEY_ID: config.S3_ACCESS_KEY_ID?.substring(0, 8) + '***',
          S3_SECRET_ACCESS_KEY: '***',
        },
        clientCreated: false
      });
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ S3:', error);
    return NextResponse.json({
      success: false,
      error: `–û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
    }, { status: 500 });
  }
} 