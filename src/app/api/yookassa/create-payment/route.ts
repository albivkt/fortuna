import { NextRequest, NextResponse } from 'next/server';
import { createPayment } from '@/lib/yookassa';
import { PLAN_PRICES } from '@/lib/planLimits';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { period, userId, userEmail } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!period || !userId) {
      return NextResponse.json(
        { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' },
        { status: 400 }
      );
    }

    if (!['MONTHLY', 'YEARLY'].includes(period)) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    const amount = PLAN_PRICES.PRO[period as keyof typeof PLAN_PRICES.PRO];
    const periodText = period === 'YEARLY' ? '–≥–æ–¥–æ–≤–∞—è' : '–º–µ—Å—è—á–Ω–∞—è';
    
    // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    const description = `–ü–æ–¥–ø–∏—Å–∫–∞ GIFTY PRO (${periodText})`;
    
    // URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    const returnUrl = `${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/payment/success-simple`;

    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    const metadata = {
      userId,
      plan: 'PRO',
      period,
      userEmail: userEmail || ''
    };

    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa:', {
      amount,
      description,
      returnUrl,
      metadata
    });

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
    const payment = await createPayment(
      amount,
      description,
      returnUrl,
      metadata
    );

    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –ÆKassa —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', payment.id);

    return NextResponse.json({
      success: true,
      paymentId: payment.id,
      confirmationUrl: payment.confirmation.confirmation_url,
      amount: payment.amount,
      description: payment.description
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}