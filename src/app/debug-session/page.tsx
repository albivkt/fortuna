'use client';

import { useState, useEffect } from 'react';
import { useWheels, useCreateWheel } from '@/lib/graphql/hooks';

export default function DebugSessionPage() {
  const { data: wheelsData, loading: wheelsLoading, error: wheelsError, refetch } = useWheels();
  const [createWheel, { loading: creating }] = useCreateWheel();
  const [sessionInfo, setSessionInfo] = useState<any>({});

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
    if (typeof window !== 'undefined') {
      const sessionId = localStorage.getItem('fortuna_session_id');
      const authToken = localStorage.getItem('auth_token');
      setSessionInfo({
        sessionId,
        authToken,
        hasSession: !!sessionId,
        hasAuth: !!authToken
      });
    }
  }, []);

  const handleCreateTestWheel = async () => {
    try {
      console.log('üé° –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä—É–ª–µ—Ç–∫–∏...');
      const result = await createWheel({
        variables: {
          input: {
            title: `–¢–µ—Å—Ç–æ–≤–∞—è —Ä—É–ª–µ—Ç–∫–∞ ${Date.now()}`,
            segments: [
              { option: '–ü—Ä–∏–∑ 1', style: { backgroundColor: '#EC4899', textColor: 'white' } },
              { option: '–ü—Ä–∏–∑ 2', style: { backgroundColor: '#3B82F6', textColor: 'white' } },
              { option: '–ü—Ä–∏–∑ 3', style: { backgroundColor: '#10B981', textColor: 'white' } }
            ],
            isPublic: false
          }
        }
      });
      
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      alert('–†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!');
      refetch();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      alert('–û—à–∏–±–∫–∞: ' + error);
    }
  };

  const handleRefresh = () => {
    refetch();
  };

  return (
    <div className="p-8 max-w-4xl mx-auto">
      <h1 className="text-3xl font-bold mb-6">–û—Ç–ª–∞–¥–∫–∞ —Å–µ—Å—Å–∏–π –∏ GraphQL</h1>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ */}
      <div className="bg-gray-100 p-4 rounded-lg mb-6">
        <h2 className="text-xl font-semibold mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏</h2>
        <div className="space-y-1 text-sm">
          <p><strong>Session ID:</strong> {sessionInfo.sessionId || '–ù–µ—Ç'}</p>
          <p><strong>Auth Token:</strong> {sessionInfo.authToken ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}</p>
          <p><strong>–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏:</strong> {sessionInfo.hasSession ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–∏'}</p>
          <p><strong>–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</strong> {sessionInfo.hasAuth ? '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}</p>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex gap-4 mb-6">
        <button
          onClick={handleCreateTestWheel}
          disabled={creating}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
        >
          {creating ? '–°–æ–∑–¥–∞–µ—Ç—Å—è...' : '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É'}
        </button>
        
        <button
          onClick={handleRefresh}
          disabled={wheelsLoading}
          className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 disabled:opacity-50"
        >
          {wheelsLoading ? '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...' : '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫'}
        </button>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {wheelsLoading && (
        <div className="bg-blue-100 p-4 rounded-lg mb-4">
          <p>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É–ª–µ—Ç–æ–∫...</p>
        </div>
      )}

      {/* –û—à–∏–±–∫–∏ */}
      {wheelsError && (
        <div className="bg-red-100 p-4 rounded-lg mb-4">
          <h3 className="font-semibold text-red-800">–û—à–∏–±–∫–∞ GraphQL:</h3>
          <p className="text-red-700">{wheelsError.message}</p>
          {wheelsError.graphQLErrors && wheelsError.graphQLErrors.length > 0 && (
            <div className="mt-2">
              <p className="font-semibold">GraphQL –æ—à–∏–±–∫–∏:</p>
              <ul className="list-disc pl-4">
                {wheelsError.graphQLErrors.map((error, index) => (
                  <li key={index}>{error.message}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫ */}
      <div className="bg-white border rounded-lg p-4">
        <h2 className="text-xl font-semibold mb-4">–ú–æ–∏ —Ä—É–ª–µ—Ç–∫–∏ ({wheelsData?.wheels.length || 0})</h2>
        
        {wheelsData?.wheels.length === 0 ? (
          <p className="text-gray-500">–†—É–ª–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!</p>
        ) : (
          <div className="space-y-2">
            {wheelsData?.wheels.map((wheel) => (
              <div key={wheel.id} className="border p-3 rounded">
                <h3 className="font-semibold">{wheel.title}</h3>
                <p className="text-sm text-gray-600">ID: {wheel.id}</p>
                <p className="text-sm text-gray-600">–°–µ–≥–º–µ–Ω—Ç–æ–≤: {wheel.segments.length}</p>
                <p className="text-sm text-gray-600">–°–æ–∑–¥–∞–Ω–∞: {new Date(wheel.createdAt).toLocaleString('ru-RU')}</p>
                <p className="text-sm text-gray-600">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {wheel.user.name} (ID: {wheel.user.id})</p>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
} 