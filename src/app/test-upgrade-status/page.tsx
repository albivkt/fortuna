'use client';

import { useState } from 'react';
import { useMe, usePlanLimits, useUpgradeToPro } from '@/lib/graphql/hooks';
import Link from 'next/link';

export default function TestUpgradeStatusPage() {
  const { data: meData, loading: meLoading, refetch: refetchMe } = useMe();
  const { data: planData, loading: planLoading, refetch: refetchPlan } = usePlanLimits();
  const [upgradeToPro, { loading: upgrading }] = useUpgradeToPro();
  const [upgradeStatus, setUpgradeStatus] = useState<string>('');

  const handleUpgrade = async () => {
    try {
      setUpgradeStatus('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
      await upgradeToPro({
        variables: { period: 'MONTHLY' }
      });
      setUpgradeStatus('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ PRO!');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await Promise.all([refetchMe(), refetchPlan()]);
    } catch (error: any) {
      console.error('Error upgrading:', error);
      setUpgradeStatus('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    }
  };

  const handleRefresh = async () => {
    setUpgradeStatus('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    try {
      await Promise.all([refetchMe(), refetchPlan()]);
      setUpgradeStatus('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    } catch (error: any) {
      setUpgradeStatus('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + error.message);
    }
  };

  const currentPlan = planData?.me?.plan || meData?.me?.plan || 'FREE';
  const isPro = currentPlan?.toLowerCase() === 'pro';

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-white mb-8">–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ PRO</h1>

        {/* –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {(meLoading || planLoading) && (
          <div className="bg-blue-500/20 text-blue-400 p-4 rounded-lg mb-6">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-400 inline-block mr-2"></div>
            –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
          </div>
        )}

        {/* –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
        {upgradeStatus && (
          <div className={`p-4 rounded-lg mb-6 ${
            upgradeStatus.includes('‚úÖ') ? 'bg-green-500/20 text-green-400' : 
            upgradeStatus.includes('‚ùå') ? 'bg-red-500/20 text-red-400' : 
            'bg-yellow-500/20 text-yellow-400'
          }`}>
            {upgradeStatus}
          </div>
        )}

        {/* –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <div className="bg-gray-800/80 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50">
            <h2 className="text-xl font-semibold text-white mb-4">–î–∞–Ω–Ω—ã–µ –∏–∑ useMe</h2>
            <div className="text-gray-300 space-y-2">
              <p><strong>ID:</strong> {meData?.me?.id || 'N/A'}</p>
              <p><strong>Email:</strong> {meData?.me?.email || 'N/A'}</p>
              <p><strong>–ò–º—è:</strong> {meData?.me?.name || 'N/A'}</p>
              <p><strong>–ü–ª–∞–Ω:</strong> <span className={meData?.me?.plan === 'PRO' ? 'text-yellow-400' : 'text-gray-400'}>{meData?.me?.plan || 'N/A'}</span></p>
              <p><strong>–ò—Å—Ç–µ–∫–∞–µ—Ç:</strong> {meData?.me?.planExpiresAt ? new Date(meData.me.planExpiresAt).toLocaleString('ru-RU') : 'N/A'}</p>
            </div>
          </div>

          <div className="bg-gray-800/80 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50">
            <h2 className="text-xl font-semibold text-white mb-4">–î–∞–Ω–Ω—ã–µ –∏–∑ usePlanLimits</h2>
            <div className="text-gray-300 space-y-2">
              <p><strong>ID:</strong> {planData?.me?.id || 'N/A'}</p>
              <p><strong>Email:</strong> {planData?.me?.email || 'N/A'}</p>
              <p><strong>–ò–º—è:</strong> {planData?.me?.name || 'N/A'}</p>
              <p><strong>–ü–ª–∞–Ω:</strong> <span className={planData?.me?.plan === 'PRO' ? 'text-yellow-400' : 'text-gray-400'}>{planData?.me?.plan || 'N/A'}</span></p>
              <p><strong>–ò—Å—Ç–µ–∫–∞–µ—Ç:</strong> {planData?.me?.planExpiresAt ? new Date(planData.me.planExpiresAt).toLocaleString('ru-RU') : 'N/A'}</p>
            </div>
          </div>
        </div>

        {/* –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å */}
        <div className="bg-gray-800/80 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50 mb-8">
          <h2 className="text-xl font-semibold text-white mb-4">–ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å</h2>
          <div className="text-gray-300 space-y-2">
            <p><strong>–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:</strong> <span className={isPro ? 'text-yellow-400' : 'text-gray-400'}>{currentPlan}</span></p>
            <p><strong>PRO —Å—Ç–∞—Ç—É—Å:</strong> <span className={isPro ? 'text-green-400' : 'text-red-400'}>{isPro ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}</span></p>
          </div>
        </div>

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <div className="bg-gray-800/80 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50 mb-8">
          <h2 className="text-xl font-semibold text-white mb-4">–î–µ–π—Å—Ç–≤–∏—è</h2>
          <div className="space-y-4">
            <button
              onClick={handleRefresh}
              className="w-full bg-blue-500 text-white px-4 py-3 rounded-lg hover:bg-blue-600 transition-colors font-medium"
            >
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </button>

            <button
              onClick={handleUpgrade}
              disabled={upgrading || isPro}
              className="w-full bg-green-500 text-white px-4 py-3 rounded-lg hover:bg-green-600 disabled:bg-gray-500 disabled:cursor-not-allowed transition-colors font-medium"
            >
              {upgrading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : isPro ? '‚úÖ –£–∂–µ PRO' : '‚≠ê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å PRO'}
            </button>

            {isPro && (
              <div className="bg-green-500/20 text-green-400 p-4 rounded-lg text-center">
                üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω PRO –ø–ª–∞–Ω!
              </div>
            )}
          </div>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="flex justify-center space-x-4">
          <Link
            href="/dashboard"
            className="bg-gray-700 text-white px-6 py-3 rounded-lg hover:bg-gray-600 transition-colors font-medium"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–∞—à–±–æ—Ä–¥
          </Link>
          <Link
            href="/dashboard/subscription"
            className="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition-colors font-medium"
          >
            –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏
          </Link>
        </div>
      </div>
    </div>
  );
}
