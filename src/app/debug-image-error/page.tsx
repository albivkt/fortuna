'use client';

import { useState } from 'react';
import { CustomWheel } from '@/components/CustomWheel';

export default function DebugImageErrorPage() {
  const [testScenario, setTestScenario] = useState<string>('');
  const [testData, setTestData] = useState([
    {
      option: '–¢–µ—Å—Ç 1',
      style: { backgroundColor: '#EC4899', textColor: 'white' },
      image: undefined as string | undefined,
      imagePosition: { x: 0, y: 0 }
    },
    {
      option: '–¢–µ—Å—Ç 2', 
      style: { backgroundColor: '#3B82F6', textColor: 'white' },
      image: undefined as string | undefined,
      imagePosition: { x: 0, y: 0 }
    }
  ]);

  const [mustSpin, setMustSpin] = useState(false);
  const [prizeNumber, setPrizeNumber] = useState(0);

  const runTest = (scenario: string) => {
    console.clear();
    console.log(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${scenario}`);
    setTestScenario(scenario);

    switch (scenario) {
      case 'empty-string':
        console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        setTestData(prev => prev.map((item, index) => 
          index === 0 ? { ...item, image: '' } : item
        ));
        break;

      case 'invalid-url':
        console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL');
        setTestData(prev => prev.map((item, index) => 
          index === 0 ? { ...item, image: 'invalid-url-123' } : item
        ));
        break;

      case 'broken-url':
        console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–π HTTP URL');
        setTestData(prev => prev.map((item, index) => 
          index === 0 ? { ...item, image: 'https://nonexistent-domain-12345.com/image.png' } : item
        ));
        break;

      case 'valid-url':
        console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π URL');
        setTestData(prev => prev.map((item, index) => 
          index === 0 ? { ...item, image: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png' } : item
        ));
        break;

      case 'clear':
        console.log('–û—á–∏—â–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        setTestData(prev => prev.map(item => ({ ...item, image: undefined })));
        break;

      default:
        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç');
    }
  };

  const handleSpin = () => {
    if (!mustSpin) {
      const newPrizeNumber = Math.floor(Math.random() * testData.length);
      setPrizeNumber(newPrizeNumber);
      setMustSpin(true);
    }
  };

  const handleStopSpinning = () => {
    setMustSpin(false);
  };

  return (
    <div className="container mx-auto p-8 max-w-6xl">
      <h1 className="text-3xl font-bold mb-8 text-center">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h1>
      
      <div className="mb-6 p-4 bg-yellow-100 border border-yellow-400 rounded-lg">
        <h2 className="text-lg font-semibold mb-2">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</h2>
        <ol className="list-decimal list-inside space-y-1 text-sm">
          <li>–û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12 ‚Üí Console)</li>
          <li>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ</li>
          <li>–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏</li>
          <li>–¢–µ–∫—É—â–∏–π —Ç–µ—Å—Ç: <strong>{testScenario || '–ù–µ –≤—ã–±—Ä–∞–Ω'}</strong></li>
        </ol>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ç–µ—Å—Ç—ã */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏</h2>
            
            <div className="space-y-2">
              <button
                onClick={() => runTest('empty-string')}
                className="w-full bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 text-left"
              >
                üî¥ –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ""
              </button>
              
              <button
                onClick={() => runTest('invalid-url')}
                className="w-full bg-orange-500 text-white py-2 px-4 rounded-lg hover:bg-orange-600 text-left"
              >
                üü† –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL
              </button>
              
              <button
                onClick={() => runTest('broken-url')}
                className="w-full bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 text-left"
              >
                üî¥ –°–ª–æ–º–∞–Ω–Ω—ã–π HTTP URL
              </button>
              
              <button
                onClick={() => runTest('valid-url')}
                className="w-full bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600 text-left"
              >
                üü¢ –í–∞–ª–∏–¥–Ω—ã–π URL
              </button>
              
              <button
                onClick={() => runTest('clear')}
                className="w-full bg-gray-500 text-white py-2 px-4 rounded-lg hover:bg-gray-600 text-left"
              >
                üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
              </button>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h2>
            
            <div className="space-y-3">
              {testData.map((segment, index) => (
                <div key={index} className="border rounded-lg p-3">
                  <div className="flex items-center space-x-3 mb-2">
                    <div
                      className="w-6 h-6 rounded-full border"
                      style={{ backgroundColor: segment.style.backgroundColor }}
                    />
                    <span className="font-medium">{segment.option}</span>
                  </div>
                  
                  <div className="text-sm space-y-1">
                    <div><strong>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong> {segment.image ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}</div>
                    <div><strong>–¢–∏–ø:</strong> {typeof segment.image}</div>
                    {segment.image && (
                      <>
                        <div><strong>–î–ª–∏–Ω–∞:</strong> {segment.image.length}</div>
                        <div className="text-xs text-gray-600 break-all">
                          <strong>URL:</strong> {segment.image.substring(0, 100)}{segment.image.length > 100 ? '...' : ''}
                        </div>
                      </>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ä—É–ª–µ—Ç–∫–∞ */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4 text-center">–¢–µ—Å—Ç–æ–≤–∞—è —Ä—É–ª–µ—Ç–∫–∞</h2>
            <div className="flex justify-center">
              <CustomWheel
                mustStartSpinning={mustSpin}
                prizeNumber={prizeNumber}
                data={testData}
                onStopSpinning={handleStopSpinning}
                size="medium"
                isPro={true}
              />
            </div>
            
            <div className="text-center mt-4">
              <button
                onClick={handleSpin}
                disabled={mustSpin}
                className="bg-gradient-to-r from-orange-400 to-pink-400 text-white px-8 py-3 rounded-lg hover:from-orange-500 hover:to-pink-500 transition-all shadow-lg disabled:opacity-50"
              >
                {mustSpin ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' : '–ö—Ä—É—Ç–∏—Ç—å!'}
              </button>
            </div>
          </div>

          {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É –ª–æ–≥–æ–≤ */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-4 text-blue-800">–ß—Ç–æ –∏—Å–∫–∞—Ç—å –≤ –ª–æ–≥–∞—Ö</h2>
            <div className="space-y-2 text-sm text-blue-700">
              <div><strong>üîÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏:</strong> –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤</div>
              <div><strong>üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</strong> –î–µ—Ç–∞–ª–∏ URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞</div>
              <div><strong>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</strong> –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ</div>
              <div><strong>‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:</strong> –†–∞–∑–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
              <div><strong>üîÑ –ü–æ–ø—ã—Ç–∫–∞ –±–µ–∑ CORS:</strong> –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 