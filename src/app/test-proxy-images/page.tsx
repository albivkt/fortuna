'use client';

import { useState } from 'react';
import { CustomWheel } from '@/components/CustomWheel';

export default function TestProxyImagesPage() {
  const [testData, setTestData] = useState([
    {
      option: 'S3 –ü—Ä–æ–∫—Å–∏',
      style: { backgroundColor: '#EC4899', textColor: 'white' },
      image: undefined as string | undefined,
      imagePosition: { x: 0, y: 0 }
    },
    {
      option: 'GitHub –ü—Ä–æ–∫—Å–∏', 
      style: { backgroundColor: '#3B82F6', textColor: 'white' },
      image: undefined as string | undefined,
      imagePosition: { x: 0, y: 0 }
    }
  ]);

  const [mustSpin, setMustSpin] = useState(false);
  const [prizeNumber, setPrizeNumber] = useState(0);
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    console.log(logMessage);
    setLogs(prev => [...prev, logMessage]);
  };

  const clearLogs = () => {
    setLogs([]);
    console.clear();
  };

  const testS3Proxy = async () => {
    addLog('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è S3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3
      const canvas = document.createElement('canvas');
      canvas.width = 120;
      canvas.height = 120;
      const ctx = canvas.getContext('2d');
      
      if (ctx) {
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
        const gradient = ctx.createRadialGradient(60, 60, 0, 60, 60, 60);
        gradient.addColorStop(0, '#ff6b6b');
        gradient.addColorStop(1, '#4ecdc4');
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, 120, 120);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        ctx.fillStyle = 'white';
        ctx.font = 'bold 14px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('PROXY', 60, 55);
        ctx.fillText('S3', 60, 75);
      }

      canvas.toBlob(async (blob) => {
        if (!blob) return;

        const formData = new FormData();
        formData.append('image', blob, 'proxy-test-s3.png');

        addLog('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3...');
        
        const uploadResponse = await fetch('/api/upload-image', {
          method: 'POST',
          body: formData,
        });

        if (uploadResponse.ok) {
          const uploadResult = await uploadResponse.json();
          addLog(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3: ${uploadResult.url}`);
          
          // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
          const proxyUrl = `/api/proxy-image?url=${encodeURIComponent(uploadResult.url)}`;
          addLog(`üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ URL: ${proxyUrl}`);
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π S3 URL –≤ —Ä—É–ª–µ—Ç–∫—É (–æ–Ω –ø–æ–ø—Ä–æ–±—É–µ—Ç –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É, –ø–æ—Ç–æ–º –±–µ–∑ CORS, –ø–æ—Ç–æ–º –ø—Ä–æ–∫—Å–∏)
          setTestData(prev => prev.map((item, index) => 
            index === 0 ? { ...item, image: uploadResult.url } : item
          ));
          
          addLog('üéØ S3 URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ä—É–ª–µ—Ç–∫—É - —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ CustomWheel –≤ –∫–æ–Ω—Å–æ–ª–∏');
        } else {
          const error = await uploadResponse.json();
          addLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: ${error.error}`);
        }
      }, 'image/png');
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ S3 –ø—Ä–æ–∫—Å–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };

  const testGitHubProxy = () => {
    addLog('üêô –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è GitHub –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    const githubUrl = 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';
    addLog(`üîó –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π GitHub URL: ${githubUrl}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º GitHub URL –≤ —Ä—É–ª–µ—Ç–∫—É
    setTestData(prev => prev.map((item, index) => 
      index === 1 ? { ...item, image: githubUrl } : item
    ));
    
    addLog('üéØ GitHub URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ä—É–ª–µ—Ç–∫—É - —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ CustomWheel –≤ –∫–æ–Ω—Å–æ–ª–∏');
  };

  const testProxyDirectly = async (url: string) => {
    addLog(`üß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è: ${url}`);
    
    try {
      const proxyUrl = `/api/proxy-image?url=${encodeURIComponent(url)}`;
      addLog(`üîó –ü—Ä–æ–∫—Å–∏ URL: ${proxyUrl}`);
      
      const img = new Image();
      img.crossOrigin = 'anonymous';
      
      img.onload = () => {
        addLog(`‚úÖ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ: ${img.width}x${img.height}`);
      };
      
      img.onerror = (error) => {
        addLog(`‚ùå –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ—É–¥–∞—á–Ω–æ`);
      };
      
      img.src = proxyUrl;
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };

  const clearImages = () => {
    addLog('üßπ –û—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    setTestData(prev => prev.map(item => ({ ...item, image: undefined })));
  };

  const handleSpin = () => {
    if (!mustSpin) {
      const newPrizeNumber = Math.floor(Math.random() * testData.length);
      setPrizeNumber(newPrizeNumber);
      setMustSpin(true);
    }
  };

  const handleStopSpinning = () => {
    setMustSpin(false);
  };

  return (
    <div className="container mx-auto p-8 max-w-7xl">
      <h1 className="text-3xl font-bold mb-8 text-center">–¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ API –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h1>
      
      <div className="mb-6 p-4 bg-blue-100 border border-blue-400 rounded-lg">
        <h2 className="text-lg font-semibold mb-2 text-blue-800">üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</h2>
        <p className="text-blue-700 text-sm">
          –ü—Ä–æ–∫—Å–∏ API –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –æ—Ç–¥–∞–µ—Ç –∏—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏. 
          CustomWheel –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø—Ä–æ–±—É–µ—Ç: 1) –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å CORS, 2) –±–µ–∑ CORS, 3) —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ API.
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ç–µ—Å—Ç—ã */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–¢–µ—Å—Ç—ã –ø—Ä–æ–∫—Å–∏</h2>
            
            <div className="space-y-3">
              <button
                onClick={testS3Proxy}
                className="w-full bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600"
              >
                üî¥ –¢–µ—Å—Ç S3 —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
              </button>
              
              <button
                onClick={testGitHubProxy}
                className="w-full bg-gray-800 text-white py-2 px-4 rounded-lg hover:bg-gray-900"
              >
                üêô –¢–µ—Å—Ç GitHub —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
              </button>
              
              <button
                onClick={() => testProxyDirectly('https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png')}
                className="w-full bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600"
              >
                üß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∫—Å–∏
              </button>
              
              <button
                onClick={clearImages}
                className="w-full bg-gray-500 text-white py-2 px-4 rounded-lg hover:bg-gray-600"
              >
                üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </button>
              
              <button
                onClick={clearLogs}
                className="w-full bg-yellow-500 text-white py-2 px-4 rounded-lg hover:bg-yellow-600"
              >
                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
              </button>
            </div>
          </div>

          {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤</h2>
            
            <div className="space-y-3">
              {testData.map((segment, index) => (
                <div key={index} className="border rounded-lg p-3">
                  <div className="flex items-center space-x-3 mb-2">
                    <div
                      className="w-6 h-6 rounded-full border"
                      style={{ backgroundColor: segment.style.backgroundColor }}
                    />
                    <span className="font-medium">{segment.option}</span>
                  </div>
                  
                  <div className="text-sm">
                    <div><strong>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong> {segment.image ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}</div>
                    {segment.image && (
                      <div className="text-xs text-gray-600 break-all mt-1">
                        {segment.image.substring(0, 50)}...
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* –°—Ä–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - —Ä—É–ª–µ—Ç–∫–∞ */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4 text-center">–¢–µ—Å—Ç–æ–≤–∞—è —Ä—É–ª–µ—Ç–∫–∞</h2>
            <div className="flex justify-center">
              <CustomWheel
                mustStartSpinning={mustSpin}
                prizeNumber={prizeNumber}
                data={testData}
                onStopSpinning={handleStopSpinning}
                size="medium"
                isPro={true}
              />
            </div>
            
            <div className="text-center mt-4">
              <button
                onClick={handleSpin}
                disabled={mustSpin}
                className="bg-gradient-to-r from-orange-400 to-pink-400 text-white px-8 py-3 rounded-lg hover:from-orange-500 hover:to-pink-500 transition-all shadow-lg disabled:opacity-50"
              >
                {mustSpin ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' : '–ö—Ä—É—Ç–∏—Ç—å!'}
              </button>
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ª–æ–≥–∏ */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–õ–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
            
            <div className="bg-gray-100 rounded-lg p-4 h-96 overflow-y-auto">
              {logs.length === 0 ? (
                <div className="text-gray-500 text-center">–õ–æ–≥–∏ –ø—É—Å—Ç—ã</div>
              ) : (
                <div className="space-y-1">
                  {logs.map((log, index) => (
                    <div key={index} className="text-xs font-mono">
                      {log}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
          <div className="bg-green-50 border border-green-200 rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-4 text-green-800">üìã –ß—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å</h2>
            <div className="space-y-2 text-sm text-green-700">
              <div><strong>–í —ç—Ç–∏—Ö –ª–æ–≥–∞—Ö:</strong> –ü—Ä–æ—Ü–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</div>
              <div><strong>–í –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞:</strong> –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ CustomWheel</div>
              <div><strong>–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</strong> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 