import { ApolloClient, InMemoryCache, createHttpLink, from } from '@apollo/client';
import { setContext } from '@apollo/client/link/context';

// –ü—Ä–æ—Å—Ç–æ–π HTTP link –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
const httpLink = createHttpLink({
  uri: '/api/graphql',
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ ID —Å–µ—Å—Å–∏–∏
const getSessionId = () => {
  if (typeof window === 'undefined') return null;
  
  let sessionId = localStorage.getItem('gifty_session_id');
  if (!sessionId) {
    sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    localStorage.setItem('gifty_session_id', sessionId);
    console.log('üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π session ID:', sessionId);
  } else {
    console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π session ID:', sessionId);
  }
  return sessionId;
};

const authLink = setContext((_, { headers }) => {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
  let token = null;
  let sessionId = null;
  
  if (typeof window !== 'undefined') {
    token = localStorage.getItem('auth_token');
    sessionId = getSessionId();
    
    console.log('üîê Auth context:', { 
      hasRealToken: !!localStorage.getItem('auth_token'),
      sessionId,
      token,
      tokenType: token?.startsWith('temp_') ? 'real' : 'temporary'
    });
  }
  
  const finalHeaders = {
    ...headers,
    authorization: token ? `Bearer ${token}` : "",
    'x-session-id': sessionId || '', // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    'X-Session-Id': sessionId || '', // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
  };
  
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏:', finalHeaders);
  
  return {
    headers: finalHeaders
  }
});

export const apolloClient = new ApolloClient({
  link: from([authLink, httpLink]),
  cache: new InMemoryCache({
    typePolicies: {
      Wheel: {
        fields: {
          segments: {
            merge: false, // –ó–∞–º–µ–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é
          },
          spins: {
            merge: false,
          },
        },
      },
      User: {
        fields: {
          wheels: {
            merge: false,
          },
        },
      },
      Query: {
        fields: {
          wheels: {
            merge: false, // –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é
          },
        },
      },
    },
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –º—è–≥–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∫—ç—à–∞
    addTypename: true,
    resultCaching: true,
  }),
  defaultOptions: {
    watchQuery: {
      errorPolicy: 'all',
      fetchPolicy: 'cache-and-network',
    },
    query: {
      errorPolicy: 'all',
      fetchPolicy: 'cache-first',
    },
    mutate: {
      errorPolicy: 'all',
    },
  },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const setAuthToken = (token: string) => {
  if (typeof window !== 'undefined') {
    localStorage.setItem('auth_token', token);
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    localStorage.removeItem('gifty_session_id');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞
export const clearAuthToken = () => {
  if (typeof window !== 'undefined') {
    localStorage.removeItem('auth_token');
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    localStorage.setItem('gifty_session_id', sessionId);
  }
}; 