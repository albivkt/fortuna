import React, { useRef, useEffect, useState } from 'react';

interface WheelData {
  option: string;
  style: {
    backgroundColor: string;
    textColor: string;
  };
  image?: string;
  imagePosition?: { x: number; y: number }; // –ü–æ–∑–∏—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
}

interface CustomDesign {
  backgroundColor?: string;
  borderColor?: string;
  textColor?: string;
  centerImage?: string;
}

interface CustomWheelProps {
  mustStartSpinning: boolean;
  prizeNumber: number;
  data: WheelData[];
  onStopSpinning: () => void;
  customDesign?: CustomDesign;
  isPro?: boolean;
  size?: 'small' | 'medium' | 'large';
  className?: string;
  containerClassName?: string;
  onImagePositionChange?: (segmentIndex: number, position: { x: number; y: number }) => void;
  isEditable?: boolean;
}

export function CustomWheel({
  mustStartSpinning,
  prizeNumber,
  data,
  onStopSpinning,
  customDesign,
  isPro = false,
  size = 'medium',
  className = '',
  containerClassName = '',
  onImagePositionChange,
  isEditable = false
}: CustomWheelProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [isSpinning, setIsSpinning] = useState(false);
  const [currentRotation, setCurrentRotation] = useState(0);
  const [images, setImages] = useState<{ [key: number]: HTMLImageElement }>({});
  const [isDragging, setIsDragging] = useState(false);
  const [dragSegment, setDragSegment] = useState<number>(-1);

  const sizeConfig = {
    small: { radius: 120, fontSize: 11, textDistance: 80 },
    medium: { radius: 160, fontSize: 13, textDistance: 100 },
    large: { radius: 200, fontSize: 15, textDistance: 130 }
  };

  const config = sizeConfig[size];
  const backgroundColor = isPro && customDesign?.backgroundColor ? customDesign.backgroundColor : 'transparent';
  const borderColor = isPro && customDesign?.borderColor ? customDesign.borderColor : '#ffffff';

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ API
  const tryProxyLoad = (imageUrl: string, index: number, newImages: { [key: number]: HTMLImageElement }, resolve: () => void) => {
    console.log(`üîÑ CustomWheel: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ API –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${index}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏ URL
    const proxyUrl = `/api/proxy-image?url=${encodeURIComponent(imageUrl)}`;
    console.log(`üîó CustomWheel: –ü—Ä–æ–∫—Å–∏ URL:`, proxyUrl);
    
    const img3 = new Image();
    img3.crossOrigin = 'anonymous'; // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CORS, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏
    
    img3.onload = () => {
      console.log(`‚úÖ CustomWheel: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ ${index} –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏`);
      console.log(`üìè CustomWheel: –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${index} —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:`, img3.width, 'x', img3.height);
      console.log(`üéâ CustomWheel: –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${index}`);
      newImages[index] = img3;
      resolve();
    };
    
    img3.onerror = (error) => {
      logImageError(error, `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${index} —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ API`, {
        '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL': imageUrl,
        '–ü—Ä–æ–∫—Å–∏ URL': proxyUrl,
        'img3 src': img3.src, // –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –∏–∑ –∫–ª—é—á–∞
        'img3.complete': img3.complete
      });
      
      console.log(`‚ùå CustomWheel: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${index} –∏—Å—á–µ—Ä–ø–∞–Ω—ã`);
      resolve(); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    };
    
    img3.src = proxyUrl;
  };

  // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const logImageError = (error: string | Event, context: string, additionalInfo?: Record<string, any>) => {
    console.group(`‚ùå CustomWheel: ${context}`);
    
    if (additionalInfo) {
      Object.entries(additionalInfo).forEach(([key, value]) => {
        // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º console.log –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ Next.js
        console.log(`${key}:`, value);
      });
    }
    
    if (typeof error === 'string') {
      console.log(`Error:`, error); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ console.log
    } else if (error instanceof Event) {
      console.log(`Event type:`, error.type); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ console.log
      console.log(`Event target:`, error.target); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ console.log
      console.log(`Event currentTarget:`, error.currentTarget); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ console.log
      console.log(`Event bubbles:`, error.bubbles); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ console.log
      console.log(`Event cancelable:`, error.cancelable); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ console.log
      
      if (error instanceof ErrorEvent) {
        console.log(`Error message:`, error.message); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ console.log
        console.log(`Error filename:`, error.filename); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ console.log
        console.log(`Error lineno:`, error.lineno); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ console.log
        console.log(`Error colno:`, error.colno); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ console.log
        console.log(`Error error:`, error.error); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ console.log
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ target, –µ—Å–ª–∏ —ç—Ç–æ HTMLImageElement
      if (error.target instanceof HTMLImageElement) {
        const img = error.target;
        console.log(`Image src:`, img.src);
        console.log(`Image complete:`, img.complete);
        console.log(`Image naturalWidth:`, img.naturalWidth);
        console.log(`Image naturalHeight:`, img.naturalHeight);
        console.log(`Image width:`, img.width);
        console.log(`Image height:`, img.height);
        console.log(`Image crossOrigin:`, img.crossOrigin);
      }
    }
    
    console.groupEnd();
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  useEffect(() => {
    const loadImages = async () => {
      console.group('üîÑ CustomWheel: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
      console.log('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', data.length);
      console.log('–°–µ–≥–º–µ–Ω—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:', data.filter(s => s.image).length);
      console.table(data.map((s, i) => ({ 
        index: i, 
        hasImage: !!s.image, 
        imageUrl: s.image?.substring(0, 100) + (s.image && s.image.length > 100 ? '...' : ''),
        imageLength: s.image?.length || 0
      })));
      console.groupEnd();
      
      const newImages: { [key: number]: HTMLImageElement } = {};
      
      const imagePromises = data.map((segment, index) => {
        if (segment.image) {
          console.group(`üñºÔ∏è CustomWheel: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${index}`);
          console.log('URL:', segment.image);
          console.log('–¢–∏–ø URL:', typeof segment.image);
          console.log('–î–ª–∏–Ω–∞ URL:', segment.image.length);
          console.log('–í–∞–ª–∏–¥–Ω—ã–π HTTP URL:', segment.image.startsWith('http'));
          console.log('–í–∞–ª–∏–¥–Ω—ã–π HTTPS URL:', segment.image.startsWith('https'));
          console.log('–í–∞–ª–∏–¥–Ω—ã–π data URL:', segment.image.startsWith('data:'));
          console.log('–ü—É—Å—Ç–æ–π URL:', segment.image.trim() === '');
          console.log('–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', segment.image.substring(0, 200));
          console.groupEnd();
          
          return new Promise<void>((resolve) => {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ë–ï–ó CORS (–æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ)
            const img = new Image();
            
            img.onload = () => {
              console.log(`‚úÖ CustomWheel: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ ${index} –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
              console.log(`üìè CustomWheel: –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${index}:`, img.width, 'x', img.height);
              console.log(`üìè CustomWheel: Natural —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${index}:`, img.naturalWidth, 'x', img.naturalHeight);
              newImages[index] = img;
              resolve();
            };
            
            img.onerror = (error) => {
              logImageError(error, `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${index} –±–µ–∑ CORS`, {
                'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': segment.image,
                'img src': img.src,
                'img.complete': img.complete,
                'img.naturalWidth': img.naturalWidth,
                'img.naturalHeight': img.naturalHeight
              });
              
              // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –° CORS
              console.log(`üîÑ CustomWheel: –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index} —Å CORS...`);
              const img2 = new Image();
              img2.crossOrigin = 'anonymous';
              
              img2.onload = () => {
                console.log(`‚úÖ CustomWheel: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ ${index} –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å CORS`);
                console.log(`üìè CustomWheel: –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${index} —Å CORS:`, img2.width, 'x', img2.height);
                newImages[index] = img2;
                resolve();
              };
              
              img2.onerror = (error2) => {
                logImageError(error2, `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${index} —Å CORS`, {
                  'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': segment.image,
                  'img2 src': img2.src,
                  'img2.complete': img2.complete
                });
                
                // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ API
                console.log(`üîÑ CustomWheel: –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ API...`);
                tryProxyLoad(segment.image!, index, newImages, resolve);
              };
              
              img2.src = segment.image!;
            };
            
            img.src = segment.image!;
          });
        }
        return Promise.resolve();
      });

      await Promise.all(imagePromises);
      
      console.log('üèÅ CustomWheel: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', Object.keys(newImages).length);
      console.log('üèÅ CustomWheel: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', Object.keys(newImages).map(key => ({ 
        segmentIndex: key, 
        imageSize: `${newImages[parseInt(key)].width}x${newImages[parseInt(key)].height}` 
      })));
      
      setImages(newImages);
    };

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    setImages({});
    loadImages();
  }, [data]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º—ã—à–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas
  const getMousePos = (canvas: HTMLCanvasElement, e: MouseEvent) => {
    const rect = canvas.getBoundingClientRect();
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    return {
      x: (e.clientX - rect.left) * scaleX,
      y: (e.clientY - rect.top) * scaleY
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –≤ –∫–∞–∫–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ—á–∫–∞
  const getSegmentAtPoint = (x: number, y: number, centerX: number, centerY: number) => {
    const dx = x - centerX;
    const dy = y - centerY;
    const distance = Math.sqrt(dx * dx + dy * dy);
    
    if (distance > config.radius) return -1;
    
    let angle = Math.atan2(dy, dx) - currentRotation;
    if (angle < 0) angle += Math.PI * 2;
    
    const anglePerSegment = (Math.PI * 2) / data.length;
    const segmentIndex = Math.floor(angle / anglePerSegment);
    
    return segmentIndex >= 0 && segmentIndex < data.length ? segmentIndex : -1;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!isEditable || isSpinning) return;
    
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const mousePos = getMousePos(canvas, e.nativeEvent);
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    
    const segmentIndex = getSegmentAtPoint(mousePos.x, mousePos.y, centerX, centerY);
    
    if (segmentIndex >= 0 && data[segmentIndex].image) {
      setIsDragging(true);
      setDragSegment(segmentIndex);
      canvas.style.cursor = 'grabbing';
    }
  };

  const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!isEditable || isSpinning) return;
    
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const mousePos = getMousePos(canvas, e.nativeEvent);
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    
    if (isDragging && dragSegment >= 0) {
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const segmentAngle = (dragSegment * (Math.PI * 2) / data.length) + currentRotation + (Math.PI / data.length);
      const dx = mousePos.x - centerX;
      const dy = mousePos.y - centerY;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞
      const localX = dx * Math.cos(-segmentAngle) - dy * Math.sin(-segmentAngle);
      const localY = dx * Math.sin(-segmentAngle) + dy * Math.cos(-segmentAngle);
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é (-1 –¥–æ 1)
      const normalizedX = Math.max(-1, Math.min(1, localX / (config.radius * 0.5)));
      const normalizedY = Math.max(-1, Math.min(1, localY / (config.radius * 0.5)));
      
      if (onImagePositionChange) {
        onImagePositionChange(dragSegment, { x: normalizedX, y: normalizedY });
      }
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
      const segmentIndex = getSegmentAtPoint(mousePos.x, mousePos.y, centerX, centerY);
      if (segmentIndex >= 0 && data[segmentIndex].image) {
        canvas.style.cursor = 'grab';
      } else {
        canvas.style.cursor = 'default';
      }
    }
  };

  const handleMouseUp = () => {
    if (isDragging) {
      setIsDragging(false);
      setDragSegment(-1);
      const canvas = canvasRef.current;
      if (canvas) {
        canvas.style.cursor = 'default';
      }
    }
  };

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä—É–ª–µ—Ç–∫–∏
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    const radius = config.radius;

    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // –†–∏—Å—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
    const anglePerSegment = (Math.PI * 2) / data.length;
    
    data.forEach((segment, index) => {
      const startAngle = index * anglePerSegment + currentRotation;
      const endAngle = startAngle + anglePerSegment;

      // –†–∏—Å—É–µ–º —Å–µ–≥–º–µ–Ω—Ç
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.arc(centerX, centerY, radius, startAngle, endAngle);
      ctx.closePath();

      // –ó–∞–ª–∏–≤–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
      if (segment.image && images[index]) {
        console.log(`üé® CustomWheel: –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${index}`, { 
          imageUrl: segment.image, 
          imageLoaded: !!images[index],
          imagePosition: segment.imagePosition,
          imageWidth: images[index]?.width,
          imageHeight: images[index]?.height
        });
        
        ctx.save();
        ctx.clip();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ü–µ–Ω—Ç—Ä)
        const imagePos = segment.imagePosition || { x: 0, y: 0 };
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞
        const img = images[index];
        const segmentCenterAngle = startAngle + anglePerSegment / 2;
        
        // –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –ø–æ–∫—Ä—ã–≤–∞—Ç—å –≤–µ—Å—å —Å–µ–≥–º–µ–Ω—Ç
        const imgRadius = radius * 1.2;
        
        // –ë–∞–∑–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ —Å–µ–≥–º–µ–Ω—Ç–∞
        const baseX = centerX + Math.cos(segmentCenterAngle) * (radius * 0.5);
        const baseY = centerY + Math.sin(segmentCenterAngle) * (radius * 0.5);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const offsetX = imagePos.x * radius * 0.3;
        const offsetY = imagePos.y * radius * 0.3;
        
        const finalX = baseX + offsetX - imgRadius / 2;
        const finalY = baseY + offsetY - imgRadius / 2;
        
        // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º
        ctx.save();
        ctx.translate(baseX + offsetX, baseY + offsetY);
        ctx.rotate(segmentCenterAngle + Math.PI / 2);
        ctx.drawImage(img, -imgRadius / 2, -imgRadius / 2, imgRadius, imgRadius);
        ctx.restore();
        
        ctx.restore();
      } else if (segment.image && !images[index]) {
        console.log(`‚è≥ CustomWheel: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${index} –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è`);
        // –û–±—ã—á–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ —Ü–≤–µ—Ç–æ–º –ø–æ–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
        ctx.fillStyle = segment.style.backgroundColor;
        ctx.fill();
      } else {
        // –û–±—ã—á–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ —Ü–≤–µ—Ç–æ–º
        ctx.fillStyle = segment.style.backgroundColor;
        ctx.fill();
      }

      // –û–±–≤–æ–¥–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
      ctx.strokeStyle = borderColor;
      ctx.lineWidth = 2;
      ctx.stroke();

      // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
      ctx.save();
      ctx.translate(centerX, centerY);
      ctx.rotate(startAngle + anglePerSegment / 2);
      
      ctx.fillStyle = segment.style.textColor;
      ctx.font = `${config.fontSize}px Arial`;
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
      ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';
      ctx.shadowBlur = 4;
      ctx.shadowOffsetX = 1;
      ctx.shadowOffsetY = 1;
      
      ctx.fillText(segment.option, config.textDistance, 0);
      ctx.restore();
    });

    // –†–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫—É —É–∫–∞–∑–∞—Ç–µ–ª—å
    ctx.save();
    ctx.translate(centerX, centerY - radius - 10);
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(-15, -20);
    ctx.lineTo(15, -20);
    ctx.closePath();
    ctx.fillStyle = borderColor;
    ctx.fill();
    ctx.strokeStyle = '#000';
    ctx.lineWidth = 2;
    ctx.stroke();
    ctx.restore();

  }, [data, currentRotation, images, config, borderColor]);

  // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ä–∞—â–µ–Ω–∏—è
  useEffect(() => {
    if (mustStartSpinning && !isSpinning) {
      setIsSpinning(true);
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É–≥–æ–ª –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
      const anglePerSegment = (Math.PI * 2) / data.length;
      const targetAngle = -(prizeNumber * anglePerSegment) + (anglePerSegment / 2);
      const spins = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
      const finalRotation = currentRotation + (Math.PI * 2 * spins) + targetAngle;
      
      // –ê–Ω–∏–º–∞—Ü–∏—è
      const duration = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã
      const startTime = Date.now();
      const startRotation = currentRotation;
      
      const animate = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Easing —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
        const easeOut = 1 - Math.pow(1 - progress, 3);
        
        const newRotation = startRotation + (finalRotation - startRotation) * easeOut;
        setCurrentRotation(newRotation);
        
        if (progress < 1) {
          requestAnimationFrame(animate);
        } else {
          setIsSpinning(false);
          onStopSpinning();
        }
      };
      
      requestAnimationFrame(animate);
    }
  }, [mustStartSpinning, isSpinning, prizeNumber, data.length, currentRotation, onStopSpinning]);

  const canvasSize = config.radius * 2 + 60; // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏

  return (
    <div 
      className={`p-4 rounded-xl transition-all duration-300 ${containerClassName}`}
      style={{ backgroundColor }}
    >
      <div className={`flex justify-center ${className}`}>
        <canvas
          ref={canvasRef}
          width={canvasSize}
          height={canvasSize}
          className="drop-shadow-2xl"
          style={{ maxWidth: '100%', height: 'auto' }}
          onMouseDown={handleMouseDown}
          onMouseMove={handleMouseMove}
          onMouseUp={handleMouseUp}
          onMouseLeave={handleMouseUp}
        />
      </div>
    </div>
  );
} 