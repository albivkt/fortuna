import { NextRequest, NextResponse } from 'next/server';
import { validateWebhook, type YooKassaWebhookData, parseAmount } from '@/lib/yookassa';
import { prisma } from '@/lib/prisma';

export async function POST(request: NextRequest) {
  try {
    const webhookData: YooKassaWebhookData = await request.json();
    
    console.log('üîî –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ÆKassa:', JSON.stringify(webhookData, null, 2));

    // –í–∞–ª–∏–¥–∞—Ü–∏—è webhook
    if (!validateWebhook(webhookData)) {
      console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π webhook –æ—Ç –ÆKassa');
      return NextResponse.json(
        { error: 'Invalid webhook data' },
        { status: 400 }
      );
    }

    const { type, event, object: paymentObject } = webhookData;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
    if (type === 'notification' && event === 'payment.succeeded') {
      await handleSuccessfulPayment(paymentObject);
    } else if (type === 'notification' && event === 'payment.canceled') {
      await handleCanceledPayment(paymentObject);
    } else {
      console.log('‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:', { type, event });
    }

    return NextResponse.json({ success: true });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    return NextResponse.json(
      { error: 'Webhook processing error' },
      { status: 500 }
    );
  }
}

async function handleSuccessfulPayment(paymentObject: any) {
  try {
    const { id: paymentId, metadata, amount } = paymentObject;
    
    if (!metadata || !metadata.userId) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –ø–ª–∞—Ç–µ–∂–µ:', paymentId);
      return;
    }

    const { userId, plan, period } = metadata;
    const paymentAmount = parseAmount(amount.value);

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', {
      paymentId,
      userId,
      plan,
      period,
      amount: paymentAmount
    });

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    const startDate = new Date();
    const endDate = new Date();
    
    if (period === 'MONTHLY') {
      endDate.setMonth(endDate.getMonth() + 1);
    } else if (period === 'YEARLY') {
      endDate.setFullYear(endDate.getFullYear() + 1);
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ
    const subscription = await prisma.subscription.create({
      data: {
        plan,
        status: 'ACTIVE',
        amount: paymentAmount,
        currency: 'RUB',
        period,
        startDate,
        endDate,
        userId,
      },
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.user.update({
      where: { id: userId },
      data: {
        plan,
        planExpiresAt: endDate,
      },
    });

    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:', {
      subscriptionId: subscription.id,
      userId,
      plan,
      expiresAt: endDate
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    throw error;
  }
}

async function handleCanceledPayment(paymentObject: any) {
  try {
    const { id: paymentId, metadata } = paymentObject;
    
    console.log('‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω:', {
      paymentId,
      metadata
    });

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
    throw error;
  }
}