'use client';

import { useQuery } from '@apollo/client';
import { gql } from '@apollo/client';
import { CustomWheel } from '@/components/CustomWheel';

const GET_WHEEL = gql`
  query GetWheel($id: ID!) {
    wheel(id: $id) {
      id
      title
      segments {
        option
        style {
          backgroundColor
          textColor
        }
        image
        imagePosition {
          x
          y
        }
      }
      customDesign {
        backgroundColor
        borderColor
        textColor
        centerImage
      }
      user {
        id
        name
        plan
      }
      createdAt
    }
  }
`;

export default function DebugSpecificWheelPage() {
  const wheelId = 'cmc6uzui0001veqq1q4y1b6'; // ID —Ä—É–ª–µ—Ç–∫–∏ –∏–∑ URL
  
  const { data: wheelData, loading, error } = useQuery(GET_WHEEL, {
    variables: { id: wheelId }
  });

  if (loading) return <div className="p-8">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div className="p-8 text-red-500">–û—à–∏–±–∫–∞: {error.message}</div>;
  if (!wheelData?.wheel) return <div className="p-8">–†—É–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</div>;

  const wheel = wheelData.wheel;

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const wheelDisplayData = wheel.segments.map((segment: any) => ({
    option: segment.option,
    style: { 
      backgroundColor: segment.style.backgroundColor, 
      textColor: segment.style.textColor || 'white' 
    },
    image: segment.image || undefined,
    imagePosition: segment.imagePosition || { x: 0, y: 0 }
  }));

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 p-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold text-white mb-8 text-center">
          –û—Ç–ª–∞–¥–∫–∞ —Ä—É–ª–µ—Ç–∫–∏: {wheel.title}
        </h1>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –¥–∞–Ω–Ω—ã–µ */}
          <div className="space-y-6">
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="bg-gray-800/80 p-6 rounded-xl">
              <h2 className="text-xl font-bold text-white mb-4">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
              <div className="text-gray-300 space-y-2 text-sm">
                <p><strong>ID:</strong> {wheel.id}</p>
                <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {wheel.title}</p>
                <p><strong>–í–ª–∞–¥–µ–ª–µ—Ü:</strong> {wheel.user.name} (ID: {wheel.user.id})</p>
                <p><strong>–ü–ª–∞–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞:</strong> <span className={wheel.user.plan === 'pro' ? 'text-yellow-400' : 'text-gray-400'}>{wheel.user.plan}</span></p>
                <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> {new Date(wheel.createdAt).toLocaleString('ru-RU')}</p>
              </div>
            </div>

            {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∑–∞–π–Ω */}
            <div className="bg-gray-800/80 p-6 rounded-xl">
              <h2 className="text-xl font-bold text-white mb-4">–ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∑–∞–π–Ω</h2>
              {wheel.customDesign ? (
                <div className="space-y-4">
                  <pre className="bg-gray-700 p-4 rounded text-xs text-gray-300 overflow-auto">
                    {JSON.stringify(wheel.customDesign, null, 2)}
                  </pre>
                  
                  {wheel.customDesign.centerImage && (
                    <div>
                      <h3 className="text-white font-semibold mb-2">–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</h3>
                      <p className="text-xs text-gray-400 mb-2 break-all">
                        URL: {wheel.customDesign.centerImage}
                      </p>
                      <img 
                        src={wheel.customDesign.centerImage} 
                        alt="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" 
                        className="w-20 h-20 object-cover border rounded"
                        onLoad={() => console.log('‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ preview –∑–∞–≥—Ä—É–∂–µ–Ω–æ')}
                        onError={(e) => {
                          console.error('‚ùå –û—à–∏–±–∫–∞ preview —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', e);
                          e.currentTarget.style.border = '2px solid red';
                        }}
                      />
                      <div className="mt-2">
                        <button
                          onClick={() => {
                            const img = new Image();
                            img.onload = () => {
                              console.log(`‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏: ${img.width}x${img.height}`);
                              alert(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è! –†–∞–∑–º–µ—Ä: ${img.width}x${img.height}`);
                            };
                            img.onerror = (err) => {
                              console.error('‚ùå –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω:', err);
                              alert('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è!');
                            };
                            img.src = wheel.customDesign.centerImage;
                          }}
                          className="bg-blue-600 text-white px-3 py-1 rounded text-xs hover:bg-blue-700"
                        >
                          –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              ) : (
                <p className="text-gray-400">–ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∑–∞–π–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</p>
              )}
            </div>

            {/* –°–µ–≥–º–µ–Ω—Ç—ã */}
            <div className="bg-gray-800/80 p-6 rounded-xl">
              <h2 className="text-xl font-bold text-white mb-4">–°–µ–≥–º–µ–Ω—Ç—ã</h2>
              <div className="space-y-2">
                {wheel.segments.map((segment: any, index: number) => (
                  <div key={index} className="flex items-center space-x-3 text-sm">
                    <div 
                      className="w-4 h-4 rounded"
                      style={{ backgroundColor: segment.style.backgroundColor }}
                    ></div>
                    <span className="text-white">{segment.option}</span>
                    {segment.image && (
                      <span className="text-blue-400 text-xs">[–∏–º–µ–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]</span>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ä—É–ª–µ—Ç–∫–∞ */}
          <div className="space-y-6">
            {/* –†—É–ª–µ—Ç–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Pro —Å—Ç–∞—Ç—É—Å–æ–º */}
            <div className="bg-gray-800/80 p-6 rounded-xl">
              <h2 className="text-xl font-bold text-white mb-4">
                –†—É–ª–µ—Ç–∫–∞ —Å Pro —Å—Ç–∞—Ç—É—Å–æ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ ({wheel.user.plan})
              </h2>
              <div className="flex justify-center">
                <CustomWheel
                  mustStartSpinning={false}
                  prizeNumber={0}
                  data={wheelDisplayData}
                  onStopSpinning={() => {}}
                  customDesign={wheel.customDesign}
                  isPro={wheel.user.plan === 'pro'}
                  size="large"
                />
              </div>
            </div>

            {/* –†—É–ª–µ—Ç–∫–∞ –±–µ–∑ Pro —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è */}
            <div className="bg-gray-800/80 p-6 rounded-xl">
              <h2 className="text-xl font-bold text-white mb-4">
                –†—É–ª–µ—Ç–∫–∞ –±–µ–∑ Pro —Å—Ç–∞—Ç—É—Å–∞ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
              </h2>
              <div className="flex justify-center">
                <CustomWheel
                  mustStartSpinning={false}
                  prizeNumber={0}
                  data={wheelDisplayData}
                  onStopSpinning={() => {}}
                  customDesign={wheel.customDesign}
                  isPro={false}
                  size="large"
                />
              </div>
            </div>
          </div>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="mt-8 bg-gray-800/80 p-6 rounded-xl">
          <h2 className="text-xl font-bold text-white mb-4">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏</h2>
          <div className="text-gray-300 space-y-2 text-sm">
            <p>1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)</p>
            <p>2. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ª–æ–≥–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "üéØ CustomWheel:"</p>
            <p>3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</p>
            <ul className="ml-4 space-y-1">
              <li>- isPro = {wheel.user.plan === 'pro' ? 'true' : 'false'}</li>
              <li>- customDesign?.centerImage = {wheel.customDesign?.centerImage ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</li>
              <li>- –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</li>
              <li>- –†–∏—Å—É–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
} 