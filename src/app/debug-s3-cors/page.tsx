'use client';

import { useState } from 'react';

export default function DebugS3CorsPage() {
  const [testUrl, setTestUrl] = useState('');
  const [testResults, setTestResults] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const addResult = (result: any) => {
    setTestResults(prev => [...prev, { ...result, timestamp: new Date().toLocaleTimeString() }]);
  };

  const clearResults = () => {
    setTestResults([]);
  };

  const testImageUrl = async (url: string, testName: string) => {
    console.group(`üß™ –¢–µ—Å—Ç: ${testName}`);
    console.log('URL:', url);
    
    addResult({ type: 'info', message: `–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç: ${testName}`, url });

    // –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å CORS
    try {
      const img1 = new Image();
      img1.crossOrigin = 'anonymous';
      
      const corsPromise = new Promise((resolve, reject) => {
        img1.onload = () => {
          console.log('‚úÖ CORS –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞');
          addResult({ 
            type: 'success', 
            message: `${testName}: CORS –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞`,
            details: `${img1.naturalWidth}x${img1.naturalHeight}`,
            url
          });
          resolve(true);
        };
        
        img1.onerror = (error) => {
          console.error('‚ùå CORS –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞');
          addResult({ 
            type: 'error', 
            message: `${testName}: CORS –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞`,
            details: '–í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å CORS –ø–æ–ª–∏—Ç–∏–∫–æ–π',
            url
          });
          reject(error);
        };
        
        setTimeout(() => {
          reject(new Error('Timeout'));
        }, 10000);
      });

      img1.src = url;
      await corsPromise;
    } catch (error) {
      console.error('CORS —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª:', error);
    }

    // –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ CORS
    try {
      const img2 = new Image();
      
      const noCorsPromise = new Promise((resolve, reject) => {
        img2.onload = () => {
          console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ CORS —É—Å–ø–µ—à–Ω–∞');
          addResult({ 
            type: 'success', 
            message: `${testName}: –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ CORS —É—Å–ø–µ—à–Ω–∞`,
            details: `${img2.naturalWidth}x${img2.naturalHeight}`,
            url
          });
          resolve(true);
        };
        
        img2.onerror = (error) => {
          console.error('‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ CORS –Ω–µ—É–¥–∞—á–Ω–∞');
          addResult({ 
            type: 'error', 
            message: `${testName}: –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ CORS –Ω–µ—É–¥–∞—á–Ω–∞`,
            details: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
            url
          });
          reject(error);
        };
        
        setTimeout(() => {
          reject(new Error('Timeout'));
        }, 10000);
      });

      img2.src = url;
      await noCorsPromise;
    } catch (error) {
      console.error('No-CORS —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª:', error);
    }

    // –¢–µ—Å—Ç 3: Fetch –∑–∞–ø—Ä–æ—Å
    try {
      console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º fetch –∑–∞–ø—Ä–æ—Å...');
      const response = await fetch(url, { 
        method: 'HEAD',
        mode: 'cors'
      });
      
      console.log('Fetch response status:', response.status);
      console.log('Fetch response headers:', Object.fromEntries(response.headers.entries()));
      
      if (response.ok) {
        addResult({ 
          type: 'success', 
          message: `${testName}: Fetch –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω`,
          details: `Status: ${response.status}`,
          url
        });
      } else {
        addResult({ 
          type: 'error', 
          message: `${testName}: Fetch –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω`,
          details: `Status: ${response.status}`,
          url
        });
      }
    } catch (error) {
      console.error('Fetch —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª:', error);
      addResult({ 
        type: 'error', 
        message: `${testName}: Fetch –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω`,
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        url
      });
    }

    console.groupEnd();
  };

  const runTestSuite = async () => {
    setIsLoading(true);
    clearResults();

    // –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ S3
    try {
      addResult({ type: 'info', message: '–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...' });
      
      const canvas = document.createElement('canvas');
      canvas.width = 100;
      canvas.height = 100;
      const ctx = canvas.getContext('2d');
      
      if (ctx) {
        ctx.fillStyle = '#ff6b6b';
        ctx.fillRect(0, 0, 100, 100);
        ctx.fillStyle = 'white';
        ctx.font = 'bold 16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('CORS', 50, 40);
        ctx.fillText('TEST', 50, 60);
      }

      canvas.toBlob(async (blob) => {
        if (!blob) return;

        const formData = new FormData();
        formData.append('image', blob, 'cors-test.png');

        const response = await fetch('/api/upload-image', {
          method: 'POST',
          body: formData,
        });

        if (response.ok) {
          const result = await response.json();
          setTestUrl(result.url);
          addResult({ 
            type: 'success', 
            message: '–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3',
            details: result.url,
            url: result.url
          });
          
          // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          setTimeout(() => {
            testImageUrl(result.url, 'S3 –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
          }, 1000);
        } else {
          const error = await response.json();
          addResult({ 
            type: 'error', 
            message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3',
            details: error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
          });
        }
      }, 'image/png');
    } catch (error) {
      addResult({ 
        type: 'error', 
        message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }

    // –¢–µ—Å—Ç 2: –í–Ω–µ—à–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å)
    await testImageUrl('https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png', '–í–Ω–µ—à–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (GitHub)');

    // –¢–µ—Å—Ç 3: –ü—Ä—è–º–æ–π URL –∫ S3 (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (testUrl) {
      await testImageUrl(testUrl, '–ü—Ä—è–º–æ–π S3 URL');
    }

    setIsLoading(false);
  };

  const testCustomUrl = async () => {
    if (!testUrl.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    await testImageUrl(testUrl, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π URL');
  };

  return (
    <div className="container mx-auto p-8 max-w-6xl">
      <h1 className="text-3xl font-bold mb-8 text-center">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CORS –ø—Ä–æ–±–ª–µ–º —Å S3</h1>
      
      <div className="mb-6 p-4 bg-red-100 border border-red-400 rounded-lg">
        <h2 className="text-lg font-semibold mb-2 text-red-800">üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞</h2>
        <p className="text-red-700 text-sm">
          –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ S3, –Ω–æ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –∏—Ö –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑-–∑–∞ CORS –ø–æ–ª–∏—Ç–∏–∫–∏. 
          –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ S3 —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Cross-Origin –∑–∞–ø—Ä–æ—Å–æ–≤.
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–¢–µ—Å—Ç—ã</h2>
            
            <div className="space-y-3">
              <button
                onClick={runTestSuite}
                disabled={isLoading}
                className="w-full bg-blue-500 text-white py-3 px-4 rounded-lg hover:bg-blue-600 disabled:opacity-50"
              >
                {isLoading ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç'}
              </button>
              
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={testUrl}
                  onChange={(e) => setTestUrl(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg"
                />
                <button
                  onClick={testCustomUrl}
                  className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                >
                  –¢–µ—Å—Ç
                </button>
              </div>
              
              <button
                onClick={clearResults}
                className="w-full bg-gray-500 text-white py-2 px-4 rounded-lg hover:bg-gray-600"
              >
                –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
              </button>
            </div>
          </div>

          {/* –†–µ—à–µ–Ω–∏—è */}
          <div className="bg-yellow-50 border border-yellow-400 rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-4 text-yellow-800">üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</h2>
            <div className="space-y-3 text-sm text-yellow-700">
              <div>
                <strong>1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –≤ S3:</strong>
                <p>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É S3 (twcstorage.ru) –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –ø–æ–ª–∏—Ç–∏–∫–∏</p>
              </div>
              <div>
                <strong>2. –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API:</strong>
                <p>–°–æ–∑–¥–∞—Ç—å API endpoint, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
              </div>
              <div>
                <strong>3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ crossOrigin:</strong>
                <p>–ó–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ CORS (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)</p>
              </div>
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h2>
            
            <div className="space-y-2 max-h-96 overflow-y-auto">
              {testResults.length === 0 ? (
                <div className="text-gray-500 text-center py-8">
                  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å
                </div>
              ) : (
                testResults.map((result, index) => (
                  <div
                    key={index}
                    className={`p-3 rounded-lg border-l-4 ${
                      result.type === 'success' 
                        ? 'bg-green-50 border-green-400' 
                        : result.type === 'error'
                        ? 'bg-red-50 border-red-400'
                        : 'bg-blue-50 border-blue-400'
                    }`}
                  >
                    <div className="flex items-start space-x-2">
                      <span className="text-xs text-gray-500">{result.timestamp}</span>
                      <div className="flex-1">
                        <div className={`font-medium ${
                          result.type === 'success' 
                            ? 'text-green-800' 
                            : result.type === 'error'
                            ? 'text-red-800'
                            : 'text-blue-800'
                        }`}>
                          {result.message}
                        </div>
                        {result.details && (
                          <div className="text-xs text-gray-600 mt-1">
                            {result.details}
                          </div>
                        )}
                        {result.url && (
                          <div className="text-xs text-gray-500 mt-1 break-all">
                            {result.url.substring(0, 80)}...
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 