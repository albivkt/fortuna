'use client';

import { useState } from 'react';
import { useApolloClient } from '@apollo/client';
import { useCreateWheel, useWheels } from '@/lib/graphql/hooks';
import { useRouter } from 'next/navigation';

export default function ResetAllPage() {
  const client = useApolloClient();
  const router = useRouter();
  const { data: wheelsData, loading: wheelsLoading, refetch } = useWheels();
  const [createWheel, { loading: creating }] = useCreateWheel();
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    setLogs(prev => [logMessage, ...prev]);
    console.log(logMessage);
  };

  const resetEverything = async () => {
    addLog('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å...');
    
    try {
      // 1. –û—á–∏—â–∞–µ–º localStorage
      if (typeof window !== 'undefined') {
        localStorage.clear();
        addLog('‚úÖ localStorage –æ—á–∏—â–µ–Ω');
      }
      
      // 2. –û—á–∏—â–∞–µ–º –∫—ç—à Apollo
      await client.clearStore();
      addLog('‚úÖ –ö—ç—à Apollo –æ—á–∏—â–µ–Ω');
      
      // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      if (typeof window !== 'undefined') {
        const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        localStorage.setItem('fortuna_session_id', newSessionId);
        addLog(`‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${newSessionId}`);
      }
      
      addLog('üéâ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!');
      alert('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: ${error}`);
    }
  };

  const testCreateAndList = async () => {
    addLog('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
      addLog('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫...');
      await refetch();
      addLog(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–µ—Ç–æ–∫: ${wheelsData?.wheels?.length || 0}`);
      
      // 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É
      addLog('2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É...');
      const result = await createWheel({
        variables: {
          input: {
            title: `–¢–µ—Å—Ç ${Date.now()}`,
            segments: [
              { option: '–ü—Ä–∏–∑ 1', style: { backgroundColor: '#EC4899', textColor: 'white' } },
              { option: '–ü—Ä–∏–∑ 2', style: { backgroundColor: '#3B82F6', textColor: 'white' } }
            ],
            isPublic: false
          }
        }
      });
      
      if (result.data?.createWheel) {
        addLog(`‚úÖ –†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${result.data.createWheel.title}`);
      } else {
        addLog('‚ùå –†—É–ª–µ—Ç–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');
        return;
      }
      
      // 3. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤–∞
      addLog('3Ô∏è‚É£ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫...');
      setTimeout(async () => {
        await refetch();
        const newCount = wheelsData?.wheels?.length || 0;
        addLog(`üìä –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–µ—Ç–æ–∫: ${newCount}`);
        
        if (newCount > 0) {
          addLog('üéâ –£–°–ü–ï–•! –†—É–ª–µ—Ç–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è!');
        } else {
          addLog('‚ùå –ü–†–û–ë–õ–ï–ú–ê! –†—É–ª–µ—Ç–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è!');
        }
      }, 2000);
      
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error}`);
    }
  };

  const showSessionInfo = () => {
    if (typeof window !== 'undefined') {
      const sessionId = localStorage.getItem('fortuna_session_id');
      const authToken = localStorage.getItem('auth_token');
      
      addLog('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏:');
      addLog(`   Session ID: ${sessionId}`);
      addLog(`   Auth Token: ${authToken || '–ù–µ—Ç'}`);
      addLog(`   –û–∂–∏–¥–∞–µ–º—ã–π email: temp_${sessionId}@fortuna.local`);
    }
  };

  return (
    <div className="p-8 max-w-4xl mx-auto">
      <h1 className="text-3xl font-bold mb-6">–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h1>
      
      <div className="grid md:grid-cols-2 gap-6">
        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <div className="space-y-4">
          <div className="bg-white border rounded-lg p-4">
            <h2 className="text-xl font-semibold mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
            
            <div className="space-y-2">
              <button
                onClick={resetEverything}
                className="w-full bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
              >
                üóëÔ∏è –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å (localStorage + –∫—ç—à)
              </button>
              
              <button
                onClick={showSessionInfo}
                className="w-full bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
              >
                üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
              </button>
              
              <button
                onClick={testCreateAndList}
                disabled={creating}
                className="w-full bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 disabled:opacity-50"
              >
                {creating ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : 'üß™ –¢–µ—Å—Ç: —Å–æ–∑–¥–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å'}
              </button>
              
              <button
                onClick={() => refetch()}
                disabled={wheelsLoading}
                className="w-full bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 disabled:opacity-50"
              >
                {wheelsLoading ? '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫'}
              </button>
            </div>
          </div>

          {/* –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
          <div className="bg-white border rounded-lg p-4">
            <h2 className="text-xl font-semibold mb-4">–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h2>
            
            <div className="space-y-2 text-sm">
              <p><strong>–†—É–ª–µ—Ç–æ–∫ –≤ —Å–ø–∏—Å–∫–µ:</strong> {wheelsData?.wheels?.length || 0}</p>
              <p><strong>–ó–∞–≥—Ä—É–∑–∫–∞:</strong> {wheelsLoading ? '–î–∞' : '–ù–µ—Ç'}</p>
              <p><strong>–°–æ–∑–¥–∞–Ω–∏–µ:</strong> {creating ? '–î–∞' : '–ù–µ—Ç'}</p>
            </div>
            
            {wheelsData?.wheels && wheelsData.wheels.length > 0 && (
              <div className="mt-4">
                <p className="font-medium mb-2">–†—É–ª–µ—Ç–∫–∏:</p>
                <div className="space-y-1">
                  {wheelsData.wheels.map((wheel, index) => (
                    <div key={wheel.id} className="text-xs bg-gray-100 p-2 rounded">
                      {index + 1}. {wheel.title}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* –õ–æ–≥–∏ */}
        <div className="bg-white border rounded-lg p-4">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">–õ–æ–≥–∏</h2>
            <button
              onClick={() => setLogs([])}
              className="bg-gray-500 text-white px-3 py-1 rounded text-sm hover:bg-gray-600"
            >
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
          </div>
          
          <div className="bg-gray-900 text-green-400 p-4 rounded font-mono text-sm h-96 overflow-y-auto">
            {logs.length === 0 ? (
              <p className="text-gray-500">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</p>
            ) : (
              logs.map((log, index) => (
                <div key={index} className="mb-1">
                  {log}
                </div>
              ))
            )}
          </div>
        </div>
      </div>

      <div className="mt-6 text-center">
        <button
          onClick={() => router.push('/dashboard')}
          className="text-blue-500 hover:underline"
        >
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∞—à–±–æ—Ä–¥—É
        </button>
      </div>
    </div>
  );
} 