'use client';

import { useQuery } from '@apollo/client';
import { GET_WHEELS } from '@/lib/graphql/queries';
import { useEffect, useState } from 'react';

export default function TestSessionHeaders() {
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [authToken, setAuthToken] = useState<string | null>(null);
  const { data, loading, error, refetch } = useQuery(GET_WHEELS);

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    if (typeof window !== 'undefined') {
      const storedSessionId = localStorage.getItem('gifty_session_id');
      const storedAuthToken = localStorage.getItem('auth_token');
      setSessionId(storedSessionId);
      setAuthToken(storedAuthToken);
    }
  }, []);

  const handleRefetch = () => {
    console.log('üîÑ Refetching wheels...');
    refetch();
  };

  const handleResetSession = () => {
    console.log('üîÑ Resetting session...');
    if (typeof window !== 'undefined') {
      localStorage.removeItem('gifty_session_id');
      window.location.reload();
    }
  };

  const handleClearSession = () => {
    console.log('üóëÔ∏è Clearing session...');
    if (typeof window !== 'undefined') {
      localStorage.clear();
      window.location.reload();
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">–¢–µ—Å—Ç Session ID</h1>
      
      <div className="bg-gray-100 p-4 rounded mb-4">
        <h2 className="font-semibold mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏</h2>
        <p><strong>Session ID:</strong> {sessionId || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</p>
        <p><strong>Auth Token:</strong> {authToken || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</p>
        <p><strong>–û–∂–∏–¥–∞–µ–º—ã–π Email:</strong> {sessionId ? `temp_${sessionId}@gifty.local` : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
        
        <div className="mt-3 space-x-2">
          <button 
            onClick={handleResetSession}
            className="bg-yellow-500 text-white px-3 py-1 rounded text-sm hover:bg-yellow-600"
          >
            üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é
          </button>
          <button 
            onClick={handleClearSession}
            className="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600"
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é
          </button>
        </div>
      </div>

      <div className="mb-4">
        <h2 className="font-semibold mb-2">–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏</h2>
        <div className="space-x-2">
          <button 
            onClick={() => window.open('/dashboard/create', '_blank')}
            className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
          >
            üé° –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É
          </button>
          <button 
            onClick={handleRefetch}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
          </button>
        </div>
      </div>

      <div className="bg-white border rounded p-4">
        <h2 className="font-semibold mb-2">–ú–æ–∏ —Ä—É–ª–µ—Ç–∫–∏</h2>
        
        {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
        
        {error && (
          <div className="text-red-600">
            <p><strong>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—É–ª–µ—Ç–æ–∫</strong></p>
            <details className="mt-2">
              <summary className="cursor-pointer text-sm">–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏</summary>
              <pre className="text-xs mt-2 bg-red-50 p-2 rounded overflow-auto">
                {JSON.stringify(error, null, 2)}
              </pre>
            </details>
          </div>
        )}
        
        {data && (
          <div className="text-green-600">
            <p><strong>–í—Å–µ–≥–æ —Ä—É–ª–µ—Ç–æ–∫:</strong> {data.wheels?.length || 0}</p>
            {data.wheels?.length > 0 && (
              <div className="mt-2">
                <h3 className="font-medium">–°–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫:</h3>
                <ul className="list-disc list-inside text-sm">
                  {data.wheels.map((wheel: any) => (
                    <li key={wheel.id}>
                      {wheel.title} (—Å–æ–∑–¥–∞–Ω–∞: {new Date(wheel.createdAt).toLocaleString()})
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
} 