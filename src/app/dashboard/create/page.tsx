'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import dynamic from 'next/dynamic';
import ImageUpload from '@/components/ImageUpload';
import { saveRoulette as saveRouletteToStorage, type Segment } from '@/lib/roulettes';
import { getCurrentUser, getSavedUserPlan, createUser, type User } from '@/lib/user';
import ColorPicker from '@/components/ColorPicker';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è SSR –ø—Ä–æ–±–ª–µ–º
const Wheel = dynamic(
  () => import('react-custom-roulette').then((mod) => ({ default: mod.Wheel })),
  { 
    ssr: false,
    loading: () => (
      <div className="w-64 h-64 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center shadow-lg">
        <span className="text-white font-bold">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
      </div>
    )
  }
);

const defaultColors = [
  '#EC4899', '#3B82F6', '#EF4444', '#10B981', 
  '#F59E0B', '#8B5CF6', '#06B6D4', '#F97316'
];

export default function CreateRoulettePage() {
  const [user, setUser] = useState<User | null>(null);
  const [rouletteName, setRouletteName] = useState('');
  const [segments, setSegments] = useState<Segment[]>([
    { id: '1', text: '–ü—Ä–∏–∑ 1', color: defaultColors[0], weight: 1 },
    { id: '2', text: '–ü—Ä–∏–∑ 2', color: defaultColors[1], weight: 1 },
  ]);
  const [activeTab, setActiveTab] = useState<'segments' | 'design' | 'settings'>('segments');
  const [isPreviewMode, setIsPreviewMode] = useState(false);
  const [mustSpin, setMustSpin] = useState(false);
  const [prizeNumber, setPrizeNumber] = useState(0);
  const [customDesign, setCustomDesign] = useState({
    backgroundColor: '#ffffff',
    borderColor: '#ffffff',
    textColor: '#000000',
    centerImage: ''
  });
  const [isPublic, setIsPublic] = useState(true);
  const [activeColorPicker, setActiveColorPicker] = useState<{
    segmentId: string;
    position: { x: number; y: number };
  } | null>(null);
  const router = useRouter();

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const token = localStorage.getItem('token');
    if (!token) {
      router.push('/login');
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = getCurrentUser();
    if (userData) {
      setUser(userData);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º ID
      const savedPlan = getSavedUserPlan(); // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
      const tempUser = createUser({
        name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        email: 'user@example.com'
      }, false); // false –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –Ω–µ –Ω–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
      setUser(tempUser);
    }
  }, [router]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  useEffect(() => {
    const handleFocus = () => {
      const userData = getCurrentUser();
      if (userData) {
        setUser(userData);
      }
    };

    window.addEventListener('focus', handleFocus);
    return () => window.removeEventListener('focus', handleFocus);
  }, []);

  const addSegment = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
    if (user?.plan === 'free' && segments.length >= 6) {
      alert('–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 6 —Å–µ–≥–º–µ–Ω—Ç–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ 20 —Å–µ–≥–º–µ–Ω—Ç–æ–≤.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è PRO –ø–ª–∞–Ω–∞
    if (user?.plan === 'pro' && segments.length >= 20) {
      alert('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ PRO –ø–ª–∞–Ω–µ: 20.');
      return;
    }

    const newSegment: Segment = {
      id: Date.now().toString(),
      text: `–ü—Ä–∏–∑ ${segments.length + 1}`,
      color: defaultColors[segments.length % defaultColors.length],
      weight: 1
    };
    setSegments([...segments, newSegment]);
  };

  const removeSegment = (id: string) => {
    if (segments.length > 2) {
      setSegments(segments.filter(seg => seg.id !== id));
    }
  };

  const updateSegment = (id: string, field: keyof Segment, value: string | number) => {
    setSegments(segments.map(seg => 
      seg.id === id ? { ...seg, [field]: value } : seg
    ));
  };

  const handlePreviewSpin = () => {
    if (!mustSpin) {
      const newPrizeNumber = Math.floor(Math.random() * segments.length);
      setPrizeNumber(newPrizeNumber);
      setMustSpin(true);
    }
  };

  const handleStopSpinning = () => {
    setMustSpin(false);
  };

  const refreshUserData = () => {
    const userData = getCurrentUser();
    if (userData) {
      setUser(userData);
      alert('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    }
  };

  const saveRouletteHandler = () => {
    if (!rouletteName.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏');
      return;
    }

    if (segments.length < 2) {
      alert('–†—É–ª–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–µ–≥–º–µ–Ω—Ç–∞');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
    if (user?.plan === 'free') {
      const { getUserRoulettes } = require('@/lib/roulettes');
      const existingRoulettes = getUserRoulettes(user.id);
      
      if (existingRoulettes.length >= 3) {
        alert('–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 3 —Ä—É–ª–µ—Ç–∫–∏. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—É–ª–µ—Ç–æ–∫.');
        return;
      }
    }

    try {
      const newRoulette = saveRouletteToStorage({
        name: rouletteName,
        segments: segments,
        isPublic: isPublic,
        author: user?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        userId: user?.id || '1',
        // –î–æ–±–∞–≤–ª—è–µ–º PRO —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å PRO
        ...(user?.plan === 'pro' && {
          customDesign: customDesign,
          stats: {
            totalSpins: 0,
            segmentWins: {},
            createdAt: new Date().toISOString()
          }
        })
      });
      
      console.log('–†—É–ª–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', newRoulette);
      router.push('/dashboard');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä—É–ª–µ—Ç–∫–∏');
    }
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è react-custom-roulette
  const wheelData = segments.map(segment => ({
    option: segment.text,
    style: { 
      backgroundColor: segment.color, 
      textColor: user?.plan === 'pro' ? customDesign.textColor : 'white' 
    }
  }));

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <Link href="/dashboard" className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-sm">G</span>
              </div>
              <span className="text-2xl font-bold text-gray-900">GIFTY</span>
            </Link>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-600">
                –ü–ª–∞–Ω: {user.plan === 'pro' ? 'PRO' : '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'}
              </span>
              <button
                onClick={refreshUserData}
                className="bg-gray-100 text-gray-700 px-3 py-2 rounded-lg hover:bg-gray-200 transition-colors text-sm"
                title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
              >
                üîÑ
              </button>
              <button
                onClick={() => setIsPreviewMode(!isPreviewMode)}
                className="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors"
              >
                {isPreviewMode ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä'}
              </button>
              <button
                onClick={saveRouletteHandler}
                className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors font-medium"
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {isPreviewMode ? (
          // Preview Mode
          <div className="text-center">
            <h1 className="text-3xl font-bold text-gray-900 mb-8">
              {rouletteName || '–ù–æ–≤–∞—è —Ä—É–ª–µ—Ç–∫–∞'}
            </h1>
            <div className="flex flex-col items-center space-y-6">
              <div 
                className="p-8 rounded-xl"
                style={{ backgroundColor: user?.plan === 'pro' ? customDesign.backgroundColor : 'transparent' }}
              >
                <Wheel
                  mustStartSpinning={mustSpin}
                  prizeNumber={prizeNumber}
                  data={wheelData}
                  onStopSpinning={handleStopSpinning}
                  outerBorderColor={user?.plan === 'pro' ? customDesign.borderColor : '#ffffff'}
                  outerBorderWidth={8}
                  innerBorderColor={user?.plan === 'pro' ? customDesign.borderColor : '#ffffff'}
                  innerBorderWidth={4}
                  radiusLineColor={user?.plan === 'pro' ? customDesign.borderColor : '#ffffff'}
                  radiusLineWidth={2}
                  fontSize={16}
                  textDistance={60}
                  spinDuration={0.8}
                />
              </div>
              <button
                onClick={handlePreviewSpin}
                disabled={mustSpin}
                className="bg-purple-600 text-white px-8 py-4 rounded-xl text-lg font-semibold hover:bg-purple-700 transition-all transform hover:scale-105 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {mustSpin ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' : '–ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ!'}
              </button>
            </div>
          </div>
        ) : (
          // Edit Mode
          <div className="grid lg:grid-cols-3 gap-8">
            {/* Left Panel - Settings */}
            <div className="lg:col-span-2 space-y-6">
              {/* Roulette Name */}
              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-semibold text-gray-900">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏</h2>
                  <div className="flex items-center space-x-2 text-sm text-green-600 bg-green-50 px-3 py-1 rounded-full">
                    <span>‚úì</span>
                    <span>–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</span>
                  </div>
                </div>
                <input
                  type="text"
                  value={rouletteName}
                  onChange={(e) => setRouletteName(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-lg text-gray-900 bg-white"
                />
              </div>

              {/* Tabs */}
              <div className="bg-white rounded-xl shadow-sm">
                <div className="border-b border-gray-200">
                  <nav className="flex space-x-8 px-6">
                    <button
                      onClick={() => setActiveTab('segments')}
                      className={`py-4 px-1 border-b-2 font-medium text-sm ${
                        activeTab === 'segments'
                          ? 'border-blue-500 text-blue-600'
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      –°–µ–≥–º–µ–Ω—Ç—ã
                    </button>
                    <button
                      onClick={() => setActiveTab('design')}
                      className={`py-4 px-1 border-b-2 font-medium text-sm ${
                        activeTab === 'design'
                          ? 'border-blue-500 text-blue-600'
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      –î–∏–∑–∞–π–Ω
                    </button>
                    <button
                      onClick={() => setActiveTab('settings')}
                      className={`py-4 px-1 border-b-2 font-medium text-sm ${
                        activeTab === 'settings'
                          ? 'border-blue-500 text-blue-600'
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                      {user.plan === 'free' && (
                        <span className="ml-1 text-xs bg-purple-100 text-purple-600 px-2 py-1 rounded">PRO</span>
                      )}
                    </button>
                  </nav>
                </div>

                <div className="p-6">
                  {activeTab === 'segments' && (
                    <div className="space-y-4">
                      <div className="flex justify-between items-center">
                        <div>
                          <h3 className="text-lg font-semibold text-gray-900">–ü—Ä–∏–∑—ã</h3>
                          <p className="text-sm text-gray-500">
                            {user?.plan === 'free' 
                              ? `${segments.length}/6 —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω)`
                              : `${segments.length}/20 —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (PRO –ø–ª–∞–Ω)`
                            }
                          </p>
                        </div>
                        <button
                          onClick={addSegment}
                          disabled={
                            (user?.plan === 'free' && segments.length >= 6) ||
                            (user?.plan === 'pro' && segments.length >= 20)
                          }
                          className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                            (user?.plan === 'free' && segments.length >= 6) ||
                            (user?.plan === 'pro' && segments.length >= 20)
                              ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                              : 'bg-blue-600 text-white hover:bg-blue-700'
                          }`}
                        >
                          + –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑
                        </button>
                      </div>
                      
                                             <div className="space-y-4">
                         {segments.map((segment, index) => (
                           <div key={segment.id} className="border border-gray-200 rounded-lg p-4 space-y-4">
                             <div className="flex items-center space-x-4">
                               <div className="flex-1">
                                 <input
                                   type="text"
                                   value={segment.text}
                                   onChange={(e) => updateSegment(segment.id, 'text', e.target.value)}
                                   placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞"
                                   className="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 bg-white"
                                 />
                               </div>
                               <div className="flex items-center space-x-2">
                                 <input
                                   type="color"
                                   value={segment.color}
                                   onChange={(e) => updateSegment(segment.id, 'color', e.target.value)}
                                   className="w-10 h-10 border border-gray-300 rounded cursor-pointer"
                                 />
                                 {user?.plan === 'pro' && (
                                   <div className="flex items-center space-x-2">
                                     <label className="text-sm text-gray-600">–í–µ—Å:</label>
                                     <input
                                       type="number"
                                       min="1"
                                       max="10"
                                       value={segment.weight}
                                       onChange={(e) => updateSegment(segment.id, 'weight', parseInt(e.target.value) || 1)}
                                       className="w-16 px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm text-gray-900 bg-white"
                                     />
                                   </div>
                                 )}
                                 {user?.plan !== 'pro' && (
                                   <div className="flex items-center space-x-2">
                                     <span className="text-xs text-gray-500 bg-purple-100 px-2 py-1 rounded">
                                       –í–µ—Å: PRO
                                     </span>
                                   </div>
                                 )}
                                 {segments.length > 2 && (
                                   <button
                                     onClick={() => removeSegment(segment.id)}
                                     className="text-red-500 hover:text-red-700 p-1"
                                   >
                                     <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                       <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                     </svg>
                                   </button>
                                 )}
                               </div>
                             </div>
                             
                             {/* Image Upload */}
                             <div>
                               <label className="block text-sm font-medium text-gray-700 mb-2">
                                 –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ {user.plan === 'free' && <span className="text-purple-600">(PRO)</span>}
                               </label>
                               <ImageUpload
                                 onImageSelect={(file) => {
                                   // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                   console.log('Image selected for segment:', segment.id, file);
                                 }}
                                 currentImage={segment.image}
                                 disabled={user.plan === 'free'}
                               />
                             </div>
                           </div>
                         ))}
                      </div>

                      {user.plan === 'free' && (
                        <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                          <div className="flex items-center space-x-2">
                            <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                            </svg>
                            <span className="text-purple-800 font-medium">PRO —Ñ—É–Ω–∫—Ü–∏–∏</span>
                          </div>
                          <p className="text-purple-700 text-sm mt-2">
                            –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–∑–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ PRO –≤–µ—Ä—Å–∏–∏
                          </p>
                          <Link
                            href="/dashboard/subscription"
                            className="inline-block mt-3 bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors text-sm font-medium"
                          >
                            –û–±–Ω–æ–≤–∏—Ç—å –¥–æ PRO
                          </Link>
                        </div>
                      )}

                      {user.plan === 'pro' && (
                        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                          <div className="flex items-center space-x-2">
                            <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                            <span className="text-green-800 font-medium">PRO —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã</span>
                          </div>
                          <p className="text-green-700 text-sm mt-2">
                            –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤–µ—Å–∞ –ø—Ä–∏–∑–æ–≤, –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∑–∞–π–Ω–∞
                          </p>
                        </div>
                      )}
                    </div>
                  )}

                  {activeTab === 'design' && (
                    <div className="space-y-6">
                      <h3 className="text-lg font-semibold text-gray-900">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∑–∞–π–Ω–∞</h3>
                      
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                          </label>
                          <p className="text-xs text-gray-500 mb-3">
                            –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –¥–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                          </p>
                          
                          {/* –í—ã–±–æ—Ä —Å–µ–≥–º–µ–Ω—Ç–æ–≤ */}
                          <div className="mb-4">
                            <div className="grid grid-cols-2 gap-2 mb-3">
                              {segments.map((segment, index) => (
                                <button
                                  key={segment.id}
                                  onClick={(e) => {
                                    const rect = e.currentTarget.getBoundingClientRect();
                                    setActiveColorPicker({
                                      segmentId: segment.id,
                                      position: {
                                        x: rect.right + 10,
                                        y: rect.top
                                      }
                                    });
                                  }}
                                  className="flex items-center space-x-2 p-2 border border-gray-300 rounded-lg hover:border-gray-400 transition-colors text-left"
                                >
                                  <div 
                                    className="w-6 h-6 rounded border border-gray-300"
                                    style={{ backgroundColor: segment.color }}
                                  ></div>
                                  <span className="text-sm text-gray-700 truncate">
                                    {segment.text || `–ü—Ä–∏–∑ ${index + 1}`}
                                  </span>
                                </button>
                              ))}
                            </div>
                          </div>
                        </div>

                        {user.plan === 'pro' ? (
                          <div className="space-y-4">
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                –¶–≤–µ—Ç —Ñ–æ–Ω–∞ —Ä—É–ª–µ—Ç–∫–∏
                              </label>
                              <input
                                type="color"
                                value={customDesign.backgroundColor}
                                onChange={(e) => setCustomDesign({...customDesign, backgroundColor: e.target.value})}
                                className="w-full h-10 border border-gray-300 rounded cursor-pointer"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü
                              </label>
                              <input
                                type="color"
                                value={customDesign.borderColor}
                                onChange={(e) => setCustomDesign({...customDesign, borderColor: e.target.value})}
                                className="w-full h-10 border border-gray-300 rounded cursor-pointer"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                              </label>
                              <input
                                type="color"
                                value={customDesign.textColor}
                                onChange={(e) => setCustomDesign({...customDesign, textColor: e.target.value})}
                                className="w-full h-10 border border-gray-300 rounded cursor-pointer"
                              />
                            </div>
                          </div>
                        ) : (
                          <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                            <div className="flex items-center space-x-2">
                              <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                              </svg>
                              <span className="text-purple-800 font-medium">PRO —Ñ—É–Ω–∫—Ü–∏–∏</span>
                            </div>
                            <p className="text-purple-700 text-sm mt-2">
                              –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–æ–Ω—ã, —à—Ä–∏—Ñ—Ç—ã –∏ –ª–æ–≥–æ—Ç–∏–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ PRO –≤–µ—Ä—Å–∏–∏
                            </p>
                            <Link
                              href="/dashboard/subscription"
                              className="inline-block mt-3 bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors text-sm font-medium"
                            >
                              –û–±–Ω–æ–≤–∏—Ç—å –¥–æ PRO
                            </Link>
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {activeTab === 'settings' && (
                    <div className="space-y-6">
                      <h3 className="text-lg font-semibold text-gray-900">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                      
                      {user.plan === 'free' ? (
                        <div className="text-center py-8">
                          <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                            <svg className="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                            </svg>
                          </div>
                          <h4 className="text-lg font-medium text-gray-900 mb-2">–û–±–Ω–æ–≤–∏—Ç–µ –¥–æ PRO</h4>
                          <p className="text-gray-600 mb-4">
                            –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º, –≤–∫–ª—é—á–∞—è –≤–µ—Å–∞ –ø—Ä–∏–∑–æ–≤ –∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é
                          </p>
                          <Link
                            href="/dashboard/subscription"
                            className="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition-colors font-medium inline-block"
                          >
                            –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω
                          </Link>
                        </div>
                      ) : (
                        <div className="space-y-6">
                          <div>
                            <h4 className="text-md font-medium text-gray-900 mb-3">–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</h4>
                            <label className="flex items-center space-x-2">
                              <input 
                                type="checkbox" 
                                checked={isPublic}
                                onChange={(e) => setIsPublic(e.target.checked)}
                                className="rounded" 
                              />
                              <span className="text-sm text-gray-700">–ü—É–±–ª–∏—á–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞</span>
                            </label>
                            <p className="text-xs text-gray-500 mt-1">
                              –ü—É–±–ª–∏—á–Ω—ã–µ —Ä—É–ª–µ—Ç–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                            </p>
                          </div>
                          
                          <div>
                            <h4 className="text-md font-medium text-gray-900 mb-3">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
                            <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                              <div className="flex items-center space-x-2">
                                <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 00-2-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4" />
                                </svg>
                                <span className="text-sm font-medium text-green-800">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞</span>
                              </div>
                              <p className="text-xs text-green-700 mt-1">
                                –ë—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º
                              </p>
                            </div>
                          </div>

                          <div>
                            <h4 className="text-md font-medium text-gray-900 mb-3">–í–µ—Å–∞ –ø—Ä–∏–∑–æ–≤</h4>
                            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                              <div className="flex items-center space-x-2">
                                <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16l3-3m-3 3l-3-3" />
                                </svg>
                                <span className="text-sm font-medium text-blue-800">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞</span>
                              </div>
                              <p className="text-xs text-blue-700 mt-1">
                                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–∞ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–°–µ–≥–º–µ–Ω—Ç—ã"
                              </p>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Right Panel - Preview */}
            <div className="lg:col-span-1">
              <div className="bg-white rounded-xl shadow-sm p-6 sticky top-8">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</h3>
                <div className="flex flex-col items-center space-y-4">
                  <div 
                    className="scale-75 origin-center p-4 rounded-lg"
                    style={{ backgroundColor: user?.plan === 'pro' ? customDesign.backgroundColor : 'transparent' }}
                  >
                    <Wheel
                      mustStartSpinning={mustSpin}
                      prizeNumber={prizeNumber}
                      data={wheelData}
                      onStopSpinning={handleStopSpinning}
                      outerBorderColor={user?.plan === 'pro' ? customDesign.borderColor : '#ffffff'}
                      outerBorderWidth={6}
                      innerBorderColor={user?.plan === 'pro' ? customDesign.borderColor : '#ffffff'}
                      innerBorderWidth={3}
                      radiusLineColor={user?.plan === 'pro' ? customDesign.borderColor : '#ffffff'}
                      radiusLineWidth={1}
                      fontSize={12}
                      textDistance={45}
                      spinDuration={0.5}
                    />
                  </div>
                  <button
                    onClick={handlePreviewSpin}
                    disabled={mustSpin}
                    className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors text-sm font-medium disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {mustSpin ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' : '–¢–µ—Å—Ç'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
      
      {/* Color Picker */}
      <ColorPicker
        isOpen={!!activeColorPicker}
        position={activeColorPicker?.position || { x: 0, y: 0 }}
        currentColor={
          activeColorPicker 
            ? segments.find(s => s.id === activeColorPicker.segmentId)?.color || '#000000'
            : '#000000'
        }
        onColorChange={(color) => {
          if (activeColorPicker) {
            updateSegment(activeColorPicker.segmentId, 'color', color);
          }
        }}
        onClose={() => setActiveColorPicker(null)}
      />
    </div>
  );
}