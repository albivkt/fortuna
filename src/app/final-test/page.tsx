'use client';

import { useState, useEffect } from 'react';
import { useCreateWheel, useWheels } from '@/lib/graphql/hooks';
import { apolloClient } from '@/lib/graphql/client';

export default function FinalTestPage() {
  const { data: wheelsData, loading: wheelsLoading, error: wheelsError, refetch } = useWheels();
  const [createWheel, { loading: creating, error: createError }] = useCreateWheel();
  const [title, setTitle] = useState('');
  const [logs, setLogs] = useState<string[]>([]);
  const [sessionInfo, setSessionInfo] = useState<any>({});

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    setLogs(prev => [logMessage, ...prev]);
    console.log(logMessage);
  };

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
    if (typeof window !== 'undefined') {
      const sessionId = localStorage.getItem('fortuna_session_id');
      const authToken = localStorage.getItem('auth_token');
      
      setSessionInfo({
        sessionId,
        authToken,
        expectedEmail: sessionId ? `temp_${sessionId}@fortuna.local` : null
      });
      
      addLog(`üîê Session ID: ${sessionId}`);
      addLog(`üìß –û–∂–∏–¥–∞–µ–º—ã–π email: temp_${sessionId}@fortuna.local`);
    }
  }, []);

  useEffect(() => {
    if (wheelsData) {
      addLog(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä—É–ª–µ—Ç–æ–∫: ${wheelsData.wheels.length}`);
    }
  }, [wheelsData]);

  const handleCreate = async () => {
    if (!title.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏');
      return;
    }

    addLog(`üé° –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏: "${title}"`);
    
    try {
      const result = await createWheel({
        variables: {
          input: {
            title: title,
            segments: [
              { option: '–ü—Ä–∏–∑ 1', style: { backgroundColor: '#EC4899', textColor: 'white' } },
              { option: '–ü—Ä–∏–∑ 2', style: { backgroundColor: '#3B82F6', textColor: 'white' } },
              { option: '–ü—Ä–∏–∑ 3', style: { backgroundColor: '#10B981', textColor: 'white' } }
            ],
            isPublic: false
          }
        }
      });

      if (result.data?.createWheel) {
        addLog(`‚úÖ –†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${result.data.createWheel.title}`);
        addLog(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.data.createWheel.user?.email || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        setTitle('');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ —Ä—É–ª–µ—Ç–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
        setTimeout(() => {
          const currentCount = wheelsData?.wheels.length || 0;
          addLog(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä—É–ª–µ—Ç–æ–∫ –≤ —Å–ø–∏—Å–∫–µ ${currentCount}`);
          
          if (currentCount === 0) {
            addLog(`‚ö†Ô∏è –†—É–ª–µ—Ç–∫–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º...`);
            refetch();
          }
        }, 1000);
      }
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${error}`);
    }
  };

  const resetSession = async () => {
    addLog('üîß –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏...');
    
    if (typeof window !== 'undefined') {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.clear();
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      localStorage.setItem('fortuna_session_id', newSessionId);
      
      addLog(`‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è: ${newSessionId}`);
      addLog(`üìß –ù–æ–≤—ã–π email: temp_${newSessionId}@fortuna.local`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setSessionInfo({
        sessionId: newSessionId,
        authToken: null,
        expectedEmail: `temp_${newSessionId}@fortuna.local`
      });
      
      // –û—á–∏—â–∞–µ–º –∫—ç—à Apollo
      await apolloClient.clearStore();
      addLog('‚úÖ –ö—ç—à Apollo –æ—á–∏—â–µ–Ω');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫
      setTimeout(() => refetch(), 500);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold mb-6">–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏</h1>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ */}
        <div className="bg-blue-50 p-4 rounded-lg mb-6">
          <h2 className="text-lg font-semibold mb-2">–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è</h2>
          <p className="text-sm"><strong>Session ID:</strong> <code>{sessionInfo.sessionId}</code></p>
          <p className="text-sm"><strong>–û–∂–∏–¥–∞–µ–º—ã–π email:</strong> <code>{sessionInfo.expectedEmail}</code></p>
        </div>

        <div className="grid lg:grid-cols-2 gap-6">
          {/* –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
          <div className="space-y-6">
            {/* –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏ */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-xl font-semibold mb-4">–°–æ–∑–¥–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É</h2>
              
              <div className="space-y-4">
                <input
                  type="text"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏"
                  className="w-full border border-gray-300 rounded px-3 py-2"
                />
                
                <button
                  onClick={handleCreate}
                  disabled={creating || !title.trim()}
                  className="w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 disabled:opacity-50"
                >
                  {creating ? '–°–æ–∑–¥–∞–µ—Ç—Å—è...' : '–°–æ–∑–¥–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É'}
                </button>
                
                {createError && (
                  <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                    <strong>–û—à–∏–±–∫–∞:</strong> {createError.message}
                  </div>
                )}
              </div>
            </div>

            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-xl font-semibold mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
              
              <div className="space-y-2">
                <button
                  onClick={resetSession}
                  className="w-full bg-red-500 text-white py-2 px-4 rounded hover:bg-red-600"
                >
                  üîß –°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é
                </button>
                
                <button
                  onClick={() => refetch()}
                  disabled={wheelsLoading}
                  className="w-full bg-purple-500 text-white py-2 px-4 rounded hover:bg-purple-600 disabled:opacity-50"
                >
                  {wheelsLoading ? '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫'}
                </button>
              </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫ */}
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold">–ú–æ–∏ —Ä—É–ª–µ—Ç–∫–∏ ({wheelsData?.wheels.length || 0})</h2>
                <span className={`px-2 py-1 rounded text-sm ${
                  wheelsLoading ? 'bg-yellow-100 text-yellow-800' : 
                  wheelsError ? 'bg-red-100 text-red-800' : 
                  'bg-green-100 text-green-800'
                }`}>
                  {wheelsLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞' : wheelsError ? '–û—à–∏–±–∫–∞' : '–ì–æ—Ç–æ–≤–æ'}
                </span>
              </div>
              
              {wheelsError && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                  <strong>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</strong> {wheelsError.message}
                </div>
              )}
              
              {wheelsData?.wheels.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  <p>–†—É–ª–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                  <p className="text-sm">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!</p>
                </div>
              ) : (
                <div className="space-y-3 max-h-64 overflow-y-auto">
                  {wheelsData?.wheels.map((wheel, index) => (
                    <div key={wheel.id} className="border rounded p-3 bg-gray-50">
                      <div className="flex justify-between items-start">
                        <div>
                          <h3 className="font-medium">{wheel.title}</h3>
                          <p className="text-sm text-gray-600">
                            –°–æ–∑–¥–∞–Ω–∞: {new Date(wheel.createdAt).toLocaleString('ru-RU')}
                          </p>
                          <p className="text-sm text-gray-600">
                            –°–µ–≥–º–µ–Ω—Ç–æ–≤: {wheel.segments.length}
                          </p>
                        </div>
                        <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded">
                          #{index + 1}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* –õ–æ–≥–∏ */}
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">–õ–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏</h2>
              <button
                onClick={() => setLogs([])}
                className="bg-gray-500 text-white px-3 py-1 rounded text-sm hover:bg-gray-600"
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </button>
            </div>
            
            <div className="bg-gray-900 text-green-400 p-4 rounded font-mono text-sm h-96 overflow-y-auto">
              {logs.length === 0 ? (
                <p className="text-gray-500">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</p>
              ) : (
                logs.map((log, index) => (
                  <div key={index} className="mb-1">
                    {log}
                  </div>
                ))
              )}
            </div>
          </div>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ */}
        {wheelsData && (
          <div className="mt-6 bg-white rounded-lg shadow p-6">
            <h2 className="text-xl font-semibold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞</h2>
            
            {wheelsData.wheels.length > 0 ? (
              <div className="bg-green-100 p-4 rounded">
                <p className="text-green-800 font-semibold">üéâ –£–°–ü–ï–•!</p>
                <p className="text-green-700">
                  –†—É–ª–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ. 
                  –ü—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!
                </p>
              </div>
            ) : (
              <div className="bg-yellow-100 p-4 rounded">
                <p className="text-yellow-800 font-semibold">‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ</p>
                <p className="text-yellow-700">
                  –°–æ–∑–¥–∞–π—Ç–µ —Ä—É–ª–µ—Ç–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
                </p>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
} 