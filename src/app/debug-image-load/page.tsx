'use client';

import { useState } from 'react';
import { CustomWheel } from '@/components/CustomWheel';

export default function DebugImageLoadPage() {
  const [testData, setTestData] = useState([
    {
      option: '–¢–µ—Å—Ç 1',
      style: { backgroundColor: '#EC4899', textColor: 'white' },
      image: undefined as string | undefined,
      imagePosition: { x: 0, y: 0 }
    },
    {
      option: '–¢–µ—Å—Ç 2', 
      style: { backgroundColor: '#3B82F6', textColor: 'white' },
      image: undefined as string | undefined,
      imagePosition: { x: 0, y: 0 }
    }
  ]);

  const [mustSpin, setMustSpin] = useState(false);
  const [prizeNumber, setPrizeNumber] = useState(0);
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    console.log(logMessage);
    setLogs(prev => [...prev, logMessage]);
  };

  const clearLogs = () => {
    setLogs([]);
    console.clear();
  };

  const testDirectUrl = async () => {
    const testUrl = 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';
    addLog(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π URL: ${testUrl}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
    const img = new Image();
    img.crossOrigin = 'anonymous';
    
    img.onload = () => {
      addLog(`‚úÖ –ü—Ä—è–º–æ–π URL –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${img.width}x${img.height}`);
      setTestData(prev => prev.map((item, index) => 
        index === 0 ? { ...item, image: testUrl } : item
      ));
    };
    
    img.onerror = (error) => {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä—è–º–æ–≥–æ URL`);
      if (error instanceof Event) {
        addLog(`‚ùå Error type: ${error.type}`);
      }
      if (error instanceof ErrorEvent) {
        addLog(`‚ùå Error message: ${error.message}`);
      }
      
      // –ü—Ä–æ–±—É–µ–º –±–µ–∑ CORS
      const img2 = new Image();
      img2.onload = () => {
        addLog(`‚úÖ –ü—Ä—è–º–æ–π URL –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ CORS: ${img2.width}x${img2.height}`);
        setTestData(prev => prev.map((item, index) => 
          index === 0 ? { ...item, image: testUrl } : item
        ));
      };
      img2.onerror = () => {
        addLog(`‚ùå –ü—Ä—è–º–æ–π URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–∂–µ –±–µ–∑ CORS`);
      };
      img2.src = testUrl;
    };
    
    img.src = testUrl;
  };

  const testS3Upload = async () => {
    addLog('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3...');
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const canvas = document.createElement('canvas');
      canvas.width = 150;
      canvas.height = 150;
      const ctx = canvas.getContext('2d');
      
      if (ctx) {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const gradient = ctx.createLinearGradient(0, 0, 150, 150);
        gradient.addColorStop(0, '#ff6b6b');
        gradient.addColorStop(0.5, '#4ecdc4');
        gradient.addColorStop(1, '#45b7d1');
        
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, 150, 150);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–≥
        ctx.beginPath();
        ctx.arc(75, 75, 40, 0, Math.PI * 2);
        ctx.fillStyle = 'white';
        ctx.fill();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        ctx.fillStyle = '#333';
        ctx.font = 'bold 16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('TEST', 75, 80);
      }

      addLog('üì¶ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ blob...');
      
      canvas.toBlob(async (blob) => {
        if (!blob) {
          addLog('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å blob');
          return;
        }

        const formData = new FormData();
        formData.append('image', blob, 'debug-test-image.png');

        addLog('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        
        const response = await fetch('/api/upload-image', {
          method: 'POST',
          body: formData,
        });

        addLog(`üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);

        if (response.ok) {
          const result = await response.json();
          addLog(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞: ${result.url}`);
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const testImg = new Image();
          testImg.crossOrigin = 'anonymous';
          
          testImg.onload = () => {
            addLog(`‚úÖ S3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: ${testImg.width}x${testImg.height}`);
            setTestData(prev => prev.map((item, index) => 
              index === 1 ? { ...item, image: result.url } : item
            ));
          };
          
          testImg.onerror = (error) => {
            addLog(`‚ùå S3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ`);
            if (error instanceof Event) {
              addLog(`‚ùå Error type: ${error.type}`);
            }
            if (error instanceof ErrorEvent) {
              addLog(`‚ùå Error message: ${error.message}`);
            }
          };
          
          testImg.src = result.url;
        } else {
          const result = await response.json();
          addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
      }, 'image/png');
    } catch (error) {
      addLog(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };

  const testBrokenUrl = () => {
    const brokenUrl = 'https://nonexistent-domain-12345.com/image.png';
    addLog(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–π URL: ${brokenUrl}`);
    
    setTestData(prev => prev.map((item, index) => 
      index === 0 ? { ...item, image: brokenUrl } : item
    ));
  };

  const clearImages = () => {
    addLog('üßπ –û—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    setTestData(prev => prev.map(item => ({ ...item, image: undefined })));
  };

  const handleSpin = () => {
    if (!mustSpin) {
      const newPrizeNumber = Math.floor(Math.random() * testData.length);
      setPrizeNumber(newPrizeNumber);
      setMustSpin(true);
      addLog(`üé≤ –ó–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏, –≤—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç: ${newPrizeNumber}`);
    }
  };

  const handleStopSpinning = () => {
    setMustSpin(false);
    addLog(`üéâ –†—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –Ω–∞: ${testData[prizeNumber]?.option}`);
  };

  return (
    <div className="container mx-auto p-8 max-w-7xl">
      <h1 className="text-3xl font-bold mb-8 text-center">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h1>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–¢–µ—Å—Ç—ã</h2>
            
            <div className="space-y-3">
              <button
                onClick={testDirectUrl}
                className="w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600"
              >
                –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ URL
              </button>
              
              <button
                onClick={testS3Upload}
                className="w-full bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600"
              >
                –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3
              </button>
              
              <button
                onClick={testBrokenUrl}
                className="w-full bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600"
              >
                –¢–µ—Å—Ç —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ URL
              </button>
              
              <button
                onClick={clearImages}
                className="w-full bg-gray-500 text-white py-2 px-4 rounded-lg hover:bg-gray-600"
              >
                –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </button>
              
              <button
                onClick={clearLogs}
                className="w-full bg-yellow-500 text-white py-2 px-4 rounded-lg hover:bg-yellow-600"
              >
                –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
              </button>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤</h2>
            
            {testData.map((segment, index) => (
              <div key={index} className="border rounded-lg p-3 mb-3">
                <div className="flex items-center space-x-3 mb-2">
                  <div
                    className="w-6 h-6 rounded-full border"
                    style={{ backgroundColor: segment.style.backgroundColor }}
                  />
                  <span className="font-medium">{segment.option}</span>
                </div>
                
                <div className="text-sm">
                  <div><strong>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong> {segment.image ? '‚úÖ' : '‚ùå'}</div>
                  {segment.image && (
                    <div className="text-xs text-gray-600 break-all mt-1">
                      {segment.image}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* –°—Ä–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - —Ä—É–ª–µ—Ç–∫–∞ */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4 text-center">–†—É–ª–µ—Ç–∫–∞</h2>
            <div className="flex justify-center">
              <CustomWheel
                mustStartSpinning={mustSpin}
                prizeNumber={prizeNumber}
                data={testData}
                onStopSpinning={handleStopSpinning}
                size="medium"
                isPro={true}
              />
            </div>
            
            <div className="text-center mt-4">
              <button
                onClick={handleSpin}
                disabled={mustSpin}
                className="bg-gradient-to-r from-orange-400 to-pink-400 text-white px-8 py-3 rounded-lg hover:from-orange-500 hover:to-pink-500 transition-all shadow-lg disabled:opacity-50"
              >
                {mustSpin ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' : '–ö—Ä—É—Ç–∏—Ç—å!'}
              </button>
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ª–æ–≥–∏ */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–õ–æ–≥–∏</h2>
            
            <div className="bg-gray-100 rounded-lg p-4 h-96 overflow-y-auto">
              {logs.length === 0 ? (
                <div className="text-gray-500 text-center">–õ–æ–≥–∏ –ø—É—Å—Ç—ã</div>
              ) : (
                <div className="space-y-1">
                  {logs.map((log, index) => (
                    <div key={index} className="text-xs font-mono">
                      {log}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 