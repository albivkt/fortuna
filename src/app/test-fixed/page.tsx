'use client';

import { useState } from 'react';
import { useCreateWheel, useWheels } from '@/lib/graphql/hooks';
import Link from 'next/link';

export default function TestFixedPage() {
  const { data: wheelsData, loading: wheelsLoading, error: wheelsError, refetch } = useWheels();
  const [createWheel, { loading: creating, error: createError }] = useCreateWheel();
  const [title, setTitle] = useState('');

  const handleCreate = async () => {
    if (!title.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏');
      return;
    }

    try {
      console.log('üé° –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏:', title);
      
      const result = await createWheel({
        variables: {
          input: {
            title: title,
            segments: [
              { option: '–ü—Ä–∏–∑ 1', style: { backgroundColor: '#EC4899', textColor: 'white' } },
              { option: '–ü—Ä–∏–∑ 2', style: { backgroundColor: '#3B82F6', textColor: 'white' } },
              { option: '–ü—Ä–∏–∑ 3', style: { backgroundColor: '#10B981', textColor: 'white' } }
            ],
            isPublic: false
          }
        }
      });

      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      
      if (result.data?.createWheel) {
        alert(`–†—É–ª–µ—Ç–∫–∞ "${result.data.createWheel.title}" —Å–æ–∑–¥–∞–Ω–∞!`);
        setTitle('');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      alert('–û—à–∏–±–∫–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-6">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏</h1>
        
        <div className="grid md:grid-cols-2 gap-6">
          {/* –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏ */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-xl font-semibold mb-4">–°–æ–∑–¥–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É</h2>
            
            <div className="space-y-4">
              <input
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏"
                className="w-full border border-gray-300 rounded px-3 py-2"
              />
              
              <button
                onClick={handleCreate}
                disabled={creating || !title.trim()}
                className="w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 disabled:opacity-50"
              >
                {creating ? '–°–æ–∑–¥–∞–µ—Ç—Å—è...' : '–°–æ–∑–¥–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É'}
              </button>
              
              {createError && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                  <strong>–û—à–∏–±–∫–∞:</strong> {createError.message}
                </div>
              )}
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫ */}
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">–ú–æ–∏ —Ä—É–ª–µ—Ç–∫–∏</h2>
              <button
                onClick={() => refetch()}
                disabled={wheelsLoading}
                className="bg-gray-500 text-white px-3 py-1 rounded text-sm hover:bg-gray-600 disabled:opacity-50"
              >
                {wheelsLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
              </button>
            </div>
            
            {wheelsError && (
              <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                <strong>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</strong> {wheelsError.message}
              </div>
            )}
            
            {wheelsLoading ? (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <span className="ml-2">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
              </div>
            ) : wheelsData?.wheels.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <p>–†—É–ª–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                <p className="text-sm">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä—É–ª–µ—Ç–∫—É!</p>
              </div>
            ) : (
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {wheelsData?.wheels.map((wheel, index) => (
                  <div key={wheel.id} className="border rounded p-3 bg-gray-50">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-medium">{wheel.title}</h3>
                        <p className="text-sm text-gray-600">
                          –°–æ–∑–¥–∞–Ω–∞: {new Date(wheel.createdAt).toLocaleString('ru-RU')}
                        </p>
                        <p className="text-sm text-gray-600">
                          –°–µ–≥–º–µ–Ω—Ç–æ–≤: {wheel.segments.length}
                        </p>
                        <p className="text-sm text-gray-600">
                          –í—Ä–∞—â–µ–Ω–∏–π: {wheel.spins?.length || 0}
                        </p>
                      </div>
                      <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
                        #{index + 1}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="mt-6 bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
          <div className="grid grid-cols-3 gap-4 text-center">
            <div className="bg-blue-50 p-4 rounded">
              <div className="text-2xl font-bold text-blue-600">
                {wheelsData?.wheels.length || 0}
              </div>
              <div className="text-sm text-gray-600">–í—Å–µ–≥–æ —Ä—É–ª–µ—Ç–æ–∫</div>
            </div>
            <div className="bg-green-50 p-4 rounded">
              <div className="text-2xl font-bold text-green-600">
                {wheelsData?.wheels.reduce((sum, wheel) => sum + (wheel.spins?.length || 0), 0) || 0}
              </div>
              <div className="text-sm text-gray-600">–í—Å–µ–≥–æ –≤—Ä–∞—â–µ–Ω–∏–π</div>
            </div>
            <div className="bg-purple-50 p-4 rounded">
              <div className="text-2xl font-bold text-purple-600">
                {wheelsData?.wheels.reduce((sum, wheel) => sum + wheel.segments.length, 0) || 0}
              </div>
              <div className="text-sm text-gray-600">–í—Å–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤</div>
            </div>
          </div>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="mt-6 text-center space-x-4">
          <Link href="/dashboard" className="text-blue-500 hover:underline">
            ‚Üê –î–∞—à–±–æ—Ä–¥
          </Link>
          <Link href="/dashboard/create" className="text-blue-500 hover:underline">
            –°–æ–∑–¥–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É ‚Üí
          </Link>
          <Link href="/clear-cache" className="text-red-500 hover:underline">
            –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
          </Link>
        </div>
      </div>
    </div>
  );
} 