'use client';

import { useState, useEffect } from 'react';
import { useQuery, useMutation } from '@apollo/client';
import { GET_WHEELS, CREATE_WHEEL, UPDATE_WHEEL, GET_WHEEL } from '@/lib/graphql/queries';
import { CustomWheel } from '@/components/CustomWheel';
import ImageUpload from '@/components/ImageUpload';

interface TestSegment {
  text: string;
  color: string;
  image: string | null;
  imagePosition: { x: number; y: number };
}

export default function DebugImagePersistencePage() {
  const [logs, setLogs] = useState<string[]>([]);
  const [testWheelId, setTestWheelId] = useState<string>('');
  const [segments, setSegments] = useState<TestSegment[]>([
    { text: '–¢–µ—Å—Ç 1', color: '#EC4899', image: null, imagePosition: { x: 0, y: 0 } },
    { text: '–¢–µ—Å—Ç 2', color: '#3B82F6', image: null, imagePosition: { x: 0, y: 0 } }
  ]);

  const { data: wheelsData, loading: wheelsLoading, refetch: refetchWheels } = useQuery(GET_WHEELS);
  const { data: wheelData, loading: wheelLoading, refetch: refetchWheel } = useQuery(GET_WHEEL, {
    variables: { id: testWheelId },
    skip: !testWheelId
  });
  const [createWheel] = useMutation(CREATE_WHEEL);
  const [updateWheel] = useMutation(UPDATE_WHEEL);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    console.log(logMessage);
    setLogs(prev => [...prev, logMessage]);
  };

  const clearLogs = () => {
    setLogs([]);
    console.clear();
  };

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É
  const createTestWheel = async () => {
    try {
      addLog('üé° –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É...');
      addLog(`üìù –°–µ–≥–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º: ${JSON.stringify(segments.map(s => ({ text: s.text, hasImage: !!s.image, imageUrl: s.image })))}`);
      
      const wheelInput = {
        title: `–¢–µ—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ${new Date().toLocaleTimeString()}`,
        segments: segments.map(segment => ({
          option: segment.text,
          style: {
            backgroundColor: segment.color,
            textColor: 'white'
          },
          image: segment.image || undefined,
          imagePosition: { x: segment.imagePosition.x, y: segment.imagePosition.y }
        })),
        isPublic: false
      };

      addLog(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(wheelInput, null, 2)}`);

      const result = await createWheel({
        variables: { input: wheelInput }
      });

      if (result.data?.createWheel) {
        const wheel = result.data.createWheel;
        setTestWheelId(wheel.id);
        addLog(`‚úÖ –†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${wheel.id}`);
        addLog(`üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã: ${JSON.stringify(wheel.segments.map((s: any) => ({ option: s.option, hasImage: !!s.image, imageUrl: s.image })))}`);
        refetchWheels();
      } else {
        addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${JSON.stringify(result.errors)}`);
      }
    } catch (error) {
      addLog(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É
  const updateTestWheel = async () => {
    if (!testWheelId) {
      addLog('‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É');
      return;
    }

    try {
      addLog('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É...');
      addLog(`üìù –°–µ–≥–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º: ${JSON.stringify(segments.map(s => ({ text: s.text, hasImage: !!s.image, imageUrl: s.image })))}`);
      
      const wheelInput = {
        title: `–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ${new Date().toLocaleTimeString()}`,
        segments: segments.map(segment => ({
          option: segment.text,
          style: {
            backgroundColor: segment.color,
            textColor: 'white'
          },
          image: segment.image || undefined,
          imagePosition: { x: segment.imagePosition.x, y: segment.imagePosition.y }
        })),
        isPublic: false
      };

      addLog(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${JSON.stringify(wheelInput, null, 2)}`);

      const result = await updateWheel({
        variables: { 
          id: testWheelId,
          input: wheelInput 
        }
      });

      if (result.data?.updateWheel) {
        const wheel = result.data.updateWheel;
        addLog(`‚úÖ –†—É–ª–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
        addLog(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã: ${JSON.stringify(wheel.segments.map((s: any) => ({ option: s.option, hasImage: !!s.image, imageUrl: s.image })))}`);
        refetchWheels();
        refetchWheel();
      } else {
        addLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${JSON.stringify(result.errors)}`);
      }
    } catch (error) {
      addLog(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—É–ª–µ—Ç–∫–∏
  const loadWheelData = () => {
    if (!wheelData?.wheel) {
      addLog('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
      return;
    }

    addLog('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—É–ª–µ—Ç–∫–∏...');
    const wheel = wheelData.wheel;
    
    addLog(`üîç –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î: ${JSON.stringify(wheel.segments.map((s: any, i: number) => ({ 
      index: i, 
      option: s.option, 
      hasImage: !!s.image, 
      imageUrl: s.image,
      imageLength: s.image?.length || 0
    })))}`);

    const transformedSegments = wheel.segments.map((segment: any) => ({
      text: segment.option,
      color: segment.style.backgroundColor,
      image: (segment.image && segment.image.trim() !== '') ? segment.image : null,
      imagePosition: segment.imagePosition ? { x: segment.imagePosition.x, y: segment.imagePosition.y } : { x: 0, y: 0 }
    }));

    addLog(`üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã: ${JSON.stringify(transformedSegments.map((s, i) => ({ 
      index: i, 
      text: s.text, 
      hasImage: !!s.image, 
      imageUrl: s.image,
      imageLength: s.image?.length || 0
    })))}`);

    setSegments(transformedSegments);
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç
  const updateSegment = (index: number, field: 'text' | 'color' | 'image', value: string | null) => {
    addLog(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç ${index}, –ø–æ–ª–µ ${field}: ${value}`);
    const newSegments = [...segments];
    newSegments[index] = { ...newSegments[index], [field]: value };
    setSegments(newSegments);
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const testImageUrl = (url: string) => {
    if (!url) {
      addLog('‚ùå URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç');
      return;
    }

    addLog(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${url}`);
    
    const img = new Image();
    img.crossOrigin = 'anonymous';
    
    img.onload = () => {
      addLog(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ! –†–∞–∑–º–µ—Ä—ã: ${img.width}x${img.height}`);
    };
    
    img.onerror = (error) => {
      addLog(`‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!`);
    };
    
    img.src = url;
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è CustomWheel
  const wheelData_display = segments.map(segment => ({
    option: segment.text,
    style: { 
      backgroundColor: segment.color, 
      textColor: 'white'
    },
    image: segment.image && segment.image.trim() !== '' ? segment.image : undefined,
    imagePosition: segment.imagePosition
  }));

  return (
    <div className="container mx-auto p-8 max-w-7xl">
      <h1 className="text-3xl font-bold mb-8 text-center">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h1>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <div className="space-y-6">
          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–æ–π */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä—É–ª–µ—Ç–∫–æ–π</h2>
            <div className="space-y-4">
              <div className="flex space-x-2">
                <button
                  onClick={createTestWheel}
                  className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
                >
                  –°–æ–∑–¥–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É
                </button>
                <button
                  onClick={updateTestWheel}
                  disabled={!testWheelId}
                  className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
                >
                  –û–±–Ω–æ–≤–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É
                </button>
                <button
                  onClick={loadWheelData}
                  disabled={!testWheelId}
                  className="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 disabled:opacity-50"
                >
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                </button>
              </div>
              
              {testWheelId && (
                <div className="text-sm text-gray-600">
                  <strong>ID —Ä—É–ª–µ—Ç–∫–∏:</strong> {testWheelId}
                </div>
              )}
            </div>
          </div>

          {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤</h2>
            <div className="space-y-4">
              {segments.map((segment, index) => (
                <div key={index} className="border rounded-lg p-4">
                  <div className="flex items-center space-x-3 mb-3">
                    <div
                      className="w-8 h-8 rounded-full border-2 border-gray-300"
                      style={{ backgroundColor: segment.color }}
                    />
                    <input
                      type="text"
                      value={segment.text}
                      onChange={(e) => updateSegment(index, 'text', e.target.value)}
                      className="flex-1 px-3 py-2 border rounded"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <label className="block text-sm font-medium">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</label>
                    <ImageUpload
                      onImageSelect={(imageUrl) => {
                        addLog(`üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${index}: ${imageUrl}`);
                        updateSegment(index, 'image', imageUrl);
                      }}
                      currentImage={segment.image || undefined}
                    />
                    
                    {segment.image && (
                      <div className="flex items-center space-x-2">
                        <img
                          src={segment.image}
                          alt="–ü—Ä–µ–≤—å—é"
                          className="w-16 h-16 object-cover rounded border"
                        />
                        <button
                          onClick={() => testImageUrl(segment.image!)}
                          className="bg-gray-500 text-white px-2 py-1 rounded text-xs hover:bg-gray-600"
                        >
                          –¢–µ—Å—Ç
                        </button>
                        <button
                          onClick={() => updateSegment(index, 'image', null)}
                          className="bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600"
                        >
                          –£–¥–∞–ª–∏—Ç—å
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* –õ–æ–≥–∏ */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">–õ–æ–≥–∏</h2>
              <button
                onClick={clearLogs}
                className="bg-gray-500 text-white px-3 py-1 rounded text-sm hover:bg-gray-600"
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </button>
            </div>
            
            <div className="h-64 overflow-y-auto bg-gray-50 p-4 rounded border text-xs font-mono">
              {logs.length === 0 ? (
                <div className="text-gray-500">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</div>
              ) : (
                logs.map((log, index) => (
                  <div key={index} className="mb-1">
                    {log}
                  </div>
                ))
              )}
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø—Ä–µ–≤—å—é */}
        <div className="space-y-6">
          {/* –ü—Ä–µ–≤—å—é —Ä—É–ª–µ—Ç–∫–∏ */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4 text-center">–ü—Ä–µ–≤—å—é —Ä—É–ª–µ—Ç–∫–∏</h2>
            <div className="flex justify-center">
              <CustomWheel
                mustStartSpinning={false}
                prizeNumber={0}
                data={wheelData_display}
                onStopSpinning={() => {}}
                isPro={true}
                size="medium"
              />
            </div>
          </div>

          {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <div className="space-y-4">
              <div>
                <strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:</strong>
                <pre className="bg-gray-100 p-2 rounded text-xs overflow-auto max-h-32 mt-1">
                  {JSON.stringify(segments.map((s, i) => ({ 
                    index: i, 
                    text: s.text, 
                    hasImage: !!s.image,
                    imageUrl: s.image?.substring(0, 50) + (s.image && s.image.length > 50 ? '...' : '')
                  })), null, 2)}
                </pre>
              </div>
              
              <div>
                <strong>–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏:</strong>
                <pre className="bg-gray-100 p-2 rounded text-xs overflow-auto max-h-32 mt-1">
                  {JSON.stringify(wheelData_display.map((s, i) => ({ 
                    index: i, 
                    option: s.option, 
                    hasImage: !!s.image,
                    imageUrl: s.image?.substring(0, 50) + (s.image && s.image.length > 50 ? '...' : '')
                  })), null, 2)}
                </pre>
              </div>

              {wheelData?.wheel && (
                <div>
                  <strong>–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:</strong>
                  <pre className="bg-gray-100 p-2 rounded text-xs overflow-auto max-h-32 mt-1">
                    {JSON.stringify(wheelData.wheel.segments.map((s: any, i: number) => ({ 
                      index: i, 
                      option: s.option, 
                      hasImage: !!s.image,
                      imageUrl: s.image?.substring(0, 50) + (s.image && s.image.length > 50 ? '...' : '')
                    })), null, 2)}
                  </pre>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 