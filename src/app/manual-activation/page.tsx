'use client';

import { useState } from 'react';
import { useMe } from '@/lib/graphql/hooks';
import { useMutation } from '@apollo/client';
import { UPGRADE_TO_PRO } from '@/lib/graphql/queries';

export default function ManualActivationPage() {
  const [result, setResult] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const { data: meData, refetch: refetchMe } = useMe();
  
  const [upgradeToPro] = useMutation(UPGRADE_TO_PRO);

  const activateSubscription = async (period: string) => {
    setLoading(true);
    setResult('');
    
    try {
      console.log('üîÑ –†—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏...');
      
      const response = await upgradeToPro({
        variables: { period }
      });
      
      console.log('üìã GraphQL –æ—Ç–≤–µ—Ç:', response);
      
      if (response.data?.upgradeToPro) {
        setResult('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é!\n' + JSON.stringify(response.data.upgradeToPro, null, 2));
        await refetchMe();
      } else {
        setResult('‚ùå –û—à–∏–±–∫–∞ GraphQL: ' + JSON.stringify(response.errors || response, null, 2));
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
      setResult('‚ùå –û—à–∏–±–∫–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-8">üîß –†—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏</h1>
        
        <div className="bg-gray-800 p-6 rounded-lg mb-6">
          <h2 className="text-xl font-bold mb-4">–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</h2>
          <div className="space-y-2">
            <p><strong>Email:</strong> {meData?.me?.email || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
            <p><strong>–ü–ª–∞–Ω:</strong> {meData?.me?.plan || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
            <p><strong>–ò—Å—Ç–µ–∫–∞–µ—Ç:</strong> {meData?.me?.planExpiresAt ? new Date(meData.me.planExpiresAt).toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
          </div>
        </div>

        <div className="grid md:grid-cols-2 gap-4 mb-6">
          <button
            onClick={() => activateSubscription('MONTHLY')}
            disabled={loading}
            className="bg-blue-600 hover:bg-blue-700 px-6 py-3 rounded-lg font-medium disabled:opacity-50"
          >
            {loading ? '–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º...' : '‚ö° –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—è—á–Ω—É—é'}
          </button>

          <button
            onClick={() => activateSubscription('YEARLY')}
            disabled={loading}
            className="bg-green-600 hover:bg-green-700 px-6 py-3 rounded-lg font-medium disabled:opacity-50"
          >
            {loading ? '–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º...' : '‚ö° –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≥–æ–¥–æ–≤—É—é'}
          </button>
        </div>

        {result && (
          <div className="bg-gray-800 p-4 rounded-lg">
            <h2 className="text-xl font-bold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç:</h2>
            <pre className="text-sm overflow-auto whitespace-pre-wrap">
              {result}
            </pre>
          </div>
        )}

        <div className="mt-8 bg-yellow-900/30 border border-yellow-600/30 rounded-lg p-4">
          <h3 className="text-lg font-bold text-yellow-400 mb-2">‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ</h3>
          <p className="text-yellow-200">
            –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å webhook –æ—Ç –ÆKassa. 
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
          </p>
        </div>
      </div>
    </div>
  );
} 