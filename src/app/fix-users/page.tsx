'use client';

import { useState, useEffect } from 'react';
import { apolloClient } from '@/lib/graphql/client';
import { gql } from '@apollo/client';

// –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä—É–ª–µ—Ç–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
const GET_ALL_WHEELS_DEBUG = gql`
  query GetAllWheelsDebug {
    wheels {
      id
      title
      createdAt
      user {
        id
        name
        email
      }
    }
  }
`;

// –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
const CREATE_WHEEL_WITH_DEBUG = gql`
  mutation CreateWheelWithDebug($input: CreateWheelInput!) {
    createWheel(input: $input) {
      id
      title
      createdAt
      user {
        id
        name
        email
      }
    }
  }
`;

export default function FixUsersPage() {
  const [sessionInfo, setSessionInfo] = useState<any>({});
  const [allWheels, setAllWheels] = useState<any[]>([]);
  const [logs, setLogs] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    setLogs(prev => [logMessage, ...prev]);
    console.log(logMessage);
  };

  useEffect(() => {
    updateSessionInfo();
  }, []);

  const updateSessionInfo = () => {
    if (typeof window !== 'undefined') {
      const sessionId = localStorage.getItem('fortuna_session_id');
      const authToken = localStorage.getItem('auth_token');
      
      const info = {
        sessionId,
        authToken,
        expectedEmail: sessionId ? `temp_${sessionId}@fortuna.local` : null,
        tokenEmail: authToken?.startsWith('temp_') ? `temp_${authToken.replace('temp_', '')}@fortuna.local` : null
      };
      
      setSessionInfo(info);
      addLog(`üîê Session ID: ${sessionId}`);
      addLog(`üé´ Auth Token: ${authToken || '–ù–µ—Ç'}`);
      addLog(`üìß –û–∂–∏–¥–∞–µ–º—ã–π email: ${info.expectedEmail}`);
      
      if (info.expectedEmail !== info.tokenEmail && info.tokenEmail) {
        addLog(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Email –∏–∑ sessionId –∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!`);
        addLog(`   SessionId email: ${info.expectedEmail}`);
        addLog(`   Token email: ${info.tokenEmail}`);
      }
    }
  };

  const fetchAllWheels = async () => {
    setLoading(true);
    addLog('üîç –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Ä—É–ª–µ—Ç–æ–∫...');
    
    try {
      const result = await apolloClient.query({
        query: GET_ALL_WHEELS_DEBUG,
        fetchPolicy: 'network-only'
      });
      
      const wheels = result.data.wheels || [];
      setAllWheels(wheels);
      addLog(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä—É–ª–µ—Ç–æ–∫: ${wheels.length}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = wheels.reduce((acc: any, wheel: any) => {
        const email = wheel.user.email;
        if (!acc[email]) {
          acc[email] = { user: wheel.user, count: 0 };
        }
        acc[email].count++;
        return acc;
      }, {});
      
      Object.entries(users).forEach(([email, data]: [string, any]) => {
        addLog(`üë§ ${email}: ${data.count} —Ä—É–ª–µ—Ç–æ–∫`);
        if (email === sessionInfo.expectedEmail) {
          addLog(`   ‚úÖ –≠—Ç–æ –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!`);
        }
      });
      
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const createTestWheel = async () => {
    addLog('üé° –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä—É–ª–µ—Ç–∫–∏...');
    addLog(`üìß –û–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${sessionInfo.expectedEmail}`);
    
    try {
      const result = await apolloClient.mutate({
        mutation: CREATE_WHEEL_WITH_DEBUG,
        variables: {
          input: {
            title: `–¢–µ—Å—Ç ${Date.now()}`,
            segments: [
              { option: '–ü—Ä–∏–∑ 1', style: { backgroundColor: '#EC4899', textColor: 'white' } },
              { option: '–ü—Ä–∏–∑ 2', style: { backgroundColor: '#3B82F6', textColor: 'white' } }
            ],
            isPublic: false
          }
        }
      });
      
      if (result.data?.createWheel) {
        const wheel = result.data.createWheel;
        addLog(`‚úÖ –†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${wheel.title}`);
        addLog(`üë§ –°–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${wheel.user.email}`);
        
        if (wheel.user.email === sessionInfo.expectedEmail) {
          addLog(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º!`);
        } else {
          addLog(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç!`);
          addLog(`   –û–∂–∏–¥–∞–ª–∏: ${sessionInfo.expectedEmail}`);
          addLog(`   –ü–æ–ª—É—á–∏–ª–∏: ${wheel.user.email}`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        setTimeout(() => fetchAllWheels(), 1000);
      }
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${error}`);
    }
  };

  const fixSession = () => {
    addLog('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é...');
    
    if (typeof window !== 'undefined') {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.removeItem('auth_token');
      localStorage.removeItem('fortuna_session_id');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
      const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      localStorage.setItem('fortuna_session_id', newSessionId);
      
      addLog(`‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${newSessionId}`);
      addLog(`üìß –ù–æ–≤—ã–π –æ–∂–∏–¥–∞–µ–º—ã–π email: temp_${newSessionId}@fortuna.local`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      updateSessionInfo();
      
      // –û—á–∏—â–∞–µ–º –∫—ç—à Apollo
      apolloClient.clearStore().then(() => {
        addLog('‚úÖ –ö—ç—à Apollo –æ—á–∏—â–µ–Ω');
      });
    }
  };

  const myWheels = allWheels.filter(wheel => wheel.user.email === sessionInfo.expectedEmail);
  const otherWheels = allWheels.filter(wheel => wheel.user.email !== sessionInfo.expectedEmail);

  return (
    <div className="p-8 max-w-6xl mx-auto">
      <h1 className="text-3xl font-bold mb-6">–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h1>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ */}
      <div className="bg-blue-50 p-4 rounded-lg mb-6">
        <h2 className="text-xl font-semibold mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>Session ID:</strong></p>
            <p className="font-mono text-xs break-all">{sessionInfo.sessionId || '–ù–µ—Ç'}</p>
          </div>
          <div>
            <p><strong>–û–∂–∏–¥–∞–µ–º—ã–π email:</strong></p>
            <p className="font-mono text-xs break-all text-blue-600">{sessionInfo.expectedEmail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex flex-wrap gap-4 mb-6">
        <button
          onClick={fixSession}
          className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
        >
          üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
        </button>
        
        <button
          onClick={fetchAllWheels}
          disabled={loading}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
        >
          {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 'üîç –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä—É–ª–µ—Ç–∫–∏'}
        </button>
        
        <button
          onClick={createTestWheel}
          className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
        >
          üé° –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É
        </button>
      </div>

      <div className="grid lg:grid-cols-3 gap-6">
        {/* –ú–æ–∏ —Ä—É–ª–µ—Ç–∫–∏ */}
        <div className="bg-white border rounded-lg p-4">
          <h2 className="text-xl font-semibold mb-4 text-green-600">
            –ú–æ–∏ —Ä—É–ª–µ—Ç–∫–∏ ({myWheels.length})
          </h2>
          
          {myWheels.length === 0 ? (
            <p className="text-gray-500">–í–∞—à–∏—Ö —Ä—É–ª–µ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
          ) : (
            <div className="space-y-2">
              {myWheels.map((wheel) => (
                <div key={wheel.id} className="border rounded p-2 bg-green-50">
                  <p className="font-medium text-sm">{wheel.title}</p>
                  <p className="text-xs text-gray-600">
                    {new Date(wheel.createdAt).toLocaleString('ru-RU')}
                  </p>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* –ß—É–∂–∏–µ —Ä—É–ª–µ—Ç–∫–∏ */}
        <div className="bg-white border rounded-lg p-4">
          <h2 className="text-xl font-semibold mb-4 text-orange-600">
            –ß—É–∂–∏–µ —Ä—É–ª–µ—Ç–∫–∏ ({otherWheels.length})
          </h2>
          
          {otherWheels.length === 0 ? (
            <p className="text-gray-500">–ß—É–∂–∏—Ö —Ä—É–ª–µ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
          ) : (
            <div className="space-y-2">
              {otherWheels.map((wheel) => (
                <div key={wheel.id} className="border rounded p-2 bg-orange-50">
                  <p className="font-medium text-sm">{wheel.title}</p>
                  <p className="text-xs text-gray-600">
                    {new Date(wheel.createdAt).toLocaleString('ru-RU')}
                  </p>
                  <p className="text-xs text-orange-600">
                    {wheel.user.email}
                  </p>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* –õ–æ–≥–∏ */}
        <div className="bg-white border rounded-lg p-4">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">–õ–æ–≥–∏</h2>
            <button
              onClick={() => setLogs([])}
              className="bg-gray-500 text-white px-3 py-1 rounded text-sm hover:bg-gray-600"
            >
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
          </div>
          
          <div className="bg-gray-900 text-green-400 p-4 rounded font-mono text-xs h-96 overflow-y-auto">
            {logs.length === 0 ? (
              <p className="text-gray-500">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</p>
            ) : (
              logs.map((log, index) => (
                <div key={index} className="mb-1">
                  {log}
                </div>
              ))
            )}
          </div>
        </div>
      </div>

      {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ */}
      {allWheels.length > 0 && (
        <div className="mt-6 bg-yellow-50 p-4 rounded-lg">
          <h3 className="text-lg font-semibold mb-2">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</h3>
          
          {myWheels.length === 0 && otherWheels.length > 0 ? (
            <div className="bg-red-100 p-3 rounded">
              <p className="text-red-800 font-semibold">üö® –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê!</p>
              <p className="text-red-700">
                –£ –≤–∞—Å –Ω–µ—Ç —Ä—É–ª–µ—Ç–æ–∫, –Ω–æ –µ—Å—Ç—å —Ä—É–ª–µ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. 
                –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
              </p>
              <p className="text-red-700 mt-2">
                <strong>–†–µ—à–µ–Ω–∏–µ:</strong> –ù–∞–∂–º–∏—Ç–µ "–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é" –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É –∑–∞–Ω–æ–≤–æ.
              </p>
            </div>
          ) : myWheels.length > 0 ? (
            <div className="bg-green-100 p-3 rounded">
              <p className="text-green-800 font-semibold">‚úÖ –í–∞—à–∏ —Ä—É–ª–µ—Ç–∫–∏ –Ω–∞–π–¥–µ–Ω—ã!</p>
              <p className="text-green-700">
                –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫—ç—à–µ –∏–ª–∏ –≤ —Ö—É–∫–µ useWheels.
              </p>
            </div>
          ) : (
            <div className="bg-gray-100 p-3 rounded">
              <p className="text-gray-800">–†—É–ª–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
} 