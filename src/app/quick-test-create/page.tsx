'use client';

import { useState } from 'react';
import { useCreateWheel, useWheels } from '@/lib/graphql/hooks';
import Link from 'next/link';

export default function QuickTestCreatePage() {
  const [createWheel, { loading: creating }] = useCreateWheel();
  const { data: wheelsData, loading: wheelsLoading, refetch } = useWheels();
  const [title, setTitle] = useState('–ë—ã—Å—Ç—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ä—É–ª–µ—Ç–∫–∞');

  const handleQuickCreate = async () => {
    try {
      console.log('üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏...');
      
      const result = await createWheel({
        variables: {
          input: {
            title: title,
            segments: [
              { option: '–ü—Ä–∏–∑ 1', style: { backgroundColor: '#EC4899', textColor: 'white' } },
              { option: '–ü—Ä–∏–∑ 2', style: { backgroundColor: '#3B82F6', textColor: 'white' } },
              { option: '–ü—Ä–∏–∑ 3', style: { backgroundColor: '#10B981', textColor: 'white' } }
            ],
            isPublic: false
          }
        }
      });

      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è:', result);
      
      if (result.data?.createWheel) {
        alert(`–†—É–ª–µ—Ç–∫–∞ "${result.data.createWheel.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`);
        refetch(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      } else {
        alert('–û—à–∏–±–∫–∞: —Ä—É–ª–µ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-2xl mx-auto">
        <div className="bg-white rounded-lg shadow p-6">
          <h1 className="text-2xl font-bold mb-6">–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏</h1>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏:</label>
              <input
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="w-full border border-gray-300 rounded px-3 py-2"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
              />
            </div>
            
            <button
              onClick={handleQuickCreate}
              disabled={creating}
              className="w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 disabled:opacity-50"
            >
              {creating ? '–°–æ–∑–¥–∞–µ—Ç—Å—è...' : '–°–æ–∑–¥–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É'}
            </button>
          </div>
        </div>

        <div className="mt-6 bg-white rounded-lg shadow p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">–ú–æ–∏ —Ä—É–ª–µ—Ç–∫–∏</h2>
            <button
              onClick={() => refetch()}
              disabled={wheelsLoading}
              className="bg-gray-500 text-white px-3 py-1 rounded text-sm hover:bg-gray-600 disabled:opacity-50"
            >
              {wheelsLoading ? '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
            </button>
          </div>
          
          {wheelsLoading ? (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          ) : wheelsData?.wheels.length === 0 ? (
            <p className="text-gray-500">–†—É–ª–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</p>
          ) : (
            <div className="space-y-2">
              {wheelsData?.wheels.map((wheel) => (
                <div key={wheel.id} className="border rounded p-3">
                  <h3 className="font-medium">{wheel.title}</h3>
                  <p className="text-sm text-gray-600">
                    –°–æ–∑–¥–∞–Ω–∞: {new Date(wheel.createdAt).toLocaleString('ru-RU')}
                  </p>
                  <p className="text-sm text-gray-600">
                    –°–µ–≥–º–µ–Ω—Ç–æ–≤: {wheel.segments.length}
                  </p>
                </div>
              ))}
            </div>
          )}
        </div>

        <div className="mt-6 text-center">
          <Link href="/dashboard" className="text-blue-500 hover:underline">
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∞—à–±–æ—Ä–¥—É
          </Link>
        </div>
      </div>
    </div>
  );
} 