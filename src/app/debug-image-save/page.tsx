'use client';

import { useState } from 'react';
import ImageUpload from '@/components/ImageUpload';

export default function DebugImageSavePage() {
  const [testImageUrl, setTestImageUrl] = useState<string>('');
  const [segmentData, setSegmentData] = useState({
    text: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç',
    color: '#EC4899',
    image: null as string | null
  });
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    console.log(message);
    setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const handleImageSelect = (imageUrl: string) => {
    addLog(`üñºÔ∏è ImageUpload callback: ${imageUrl}`);
    addLog(`üîç URL —Ç–∏–ø: ${typeof imageUrl}`);
    addLog(`üîç URL –¥–ª–∏–Ω–∞: ${imageUrl.length}`);
    addLog(`üîç URL –≤–∞–ª–∏–¥–Ω—ã–π: ${imageUrl.startsWith('https://')}`);
    
    setTestImageUrl(imageUrl);
    setSegmentData(prev => ({ ...prev, image: imageUrl }));
    
    addLog(`‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
  };

  const testImageAccess = () => {
    if (!testImageUrl) {
      addLog('‚ùå –ù–µ—Ç URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    addLog(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${testImageUrl}`);
    
    const img = new Image();
    img.crossOrigin = 'anonymous';
    
    img.onload = () => {
      addLog(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${img.width}x${img.height}`);
    };
    
    img.onerror = (error) => {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
      console.error('Image error:', error);
    };
    
    img.src = testImageUrl;
  };

  const simulateSave = () => {
    addLog(`üíæ –°–∏–º—É–ª—è—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...`);
    addLog(`üìù –î–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–∞: ${JSON.stringify(segmentData)}`);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º JSON.stringify –∫–∞–∫ –≤ GraphQL resolver
    const serialized = JSON.stringify([{
      option: segmentData.text,
      style: {
        backgroundColor: segmentData.color,
        textColor: 'white'
      },
      image: segmentData.image,
      imagePosition: { x: 0, y: 0 }
    }]);
    
    addLog(`üì§ –°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${serialized}`);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
    try {
      const parsed = JSON.parse(serialized);
      addLog(`üì• –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(parsed)}`);
      addLog(`üîç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${parsed[0].image}`);
      addLog(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å: ${!!parsed[0].image}`);
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };

  return (
    <div className="container mx-auto p-8 max-w-4xl">
      <h1 className="text-3xl font-bold mb-8">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h1>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ç–µ—Å—Ç—ã */}
        <div className="space-y-6">
          {/* –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h2>
            <ImageUpload
              onImageSelect={handleImageSelect}
              currentImage={testImageUrl || undefined}
            />
            
            {testImageUrl && (
              <div className="mt-4">
                <p className="text-sm font-medium">–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</p>
                <img 
                  src={testImageUrl} 
                  alt="–¢–µ—Å—Ç" 
                  className="w-24 h-24 object-cover border rounded mt-2"
                />
                <p className="text-xs text-gray-600 mt-1 break-all">{testImageUrl}</p>
              </div>
            )}
          </div>

          {/* –¢–µ—Å—Ç—ã */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">2. –¢–µ—Å—Ç—ã</h2>
            <div className="space-y-3">
              <button
                onClick={testImageAccess}
                disabled={!testImageUrl}
                className="w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 disabled:opacity-50"
              >
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </button>
              
              <button
                onClick={simulateSave}
                disabled={!testImageUrl}
                className="w-full bg-green-500 text-white py-2 px-4 rounded hover:bg-green-600 disabled:opacity-50"
              >
                –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫—É
              </button>
              
              <button
                onClick={() => setLogs([])}
                className="w-full bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-600"
              >
                –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
              </button>
            </div>
          </div>

          {/* –î–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–∞ */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">3. –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ</h2>
            <div className="space-y-2">
              <div>
                <strong>–¢–µ–∫—Å—Ç:</strong> {segmentData.text}
              </div>
              <div className="flex items-center space-x-2">
                <strong>–¶–≤–µ—Ç:</strong>
                <div 
                  className="w-6 h-6 rounded border"
                  style={{ backgroundColor: segmentData.color }}
                />
                <span>{segmentData.color}</span>
              </div>
              <div>
                <strong>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong> {segmentData.image ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}
              </div>
              {segmentData.image && (
                <div className="text-xs text-gray-600 break-all mt-1">
                  {segmentData.image}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ª–æ–≥–∏ */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4">–õ–æ–≥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</h2>
          <div className="bg-gray-100 rounded p-4 h-96 overflow-y-auto">
            {logs.length === 0 ? (
              <p className="text-gray-500 text-sm">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</p>
            ) : (
              <div className="space-y-1">
                {logs.map((log, index) => (
                  <div key={index} className="text-xs font-mono">
                    {log}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div className="mt-8 bg-yellow-50 border border-yellow-200 rounded-lg p-6">
        <h3 className="font-semibold mb-2 text-yellow-800">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
        <ol className="list-decimal list-inside space-y-1 text-sm text-yellow-700">
          <li>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é ImageUpload –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞</li>
          <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
          <li>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏–º—É–ª—è—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</li>
          <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫</li>
        </ol>
      </div>
    </div>
  );
} 