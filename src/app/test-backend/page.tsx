'use client';

import { useState } from 'react';
import { 
  useWheels, 
  useCreateWheel, 
  useSpinWheel, 
  useDeleteWheel,
  useRegister,
  useLogin,
  useAuth,
  useLogout,
  type CreateWheelInput 
} from '@/lib/graphql/hooks';

export default function TestBackendPage() {
  const [testResults, setTestResults] = useState<string[]>([]);
  const [email, setEmail] = useState('test@example.com');
  const [password, setPassword] = useState('password123');
  const [name, setName] = useState('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');

  // –•—É–∫–∏
  const { data: wheelsData, loading: wheelsLoading, error: wheelsError, refetch: refetchWheels } = useWheels();
  const [createWheel] = useCreateWheel();
  const [spinWheel] = useSpinWheel();
  const [deleteWheel] = useDeleteWheel();
  const [register] = useRegister();
  const [login] = useLogin();
  const { user, isAuthenticated, loading: authLoading } = useAuth();
  const logout = useLogout();

  const addResult = (message: string) => {
    setTestResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const clearResults = () => {
    setTestResults([]);
  };

  // –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const testRegister = async () => {
    try {
      const result = await register({
        variables: {
          input: { email, password, name }
        }
      });
      
      if (result.data) {
        addResult(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ${result.data.register.user.email}`);
      }
    } catch (error: any) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
    }
  };

  // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞
  const testLogin = async () => {
    try {
      const result = await login({
        variables: {
          input: { email, password }
        }
      });
      
      if (result.data) {
        addResult(`‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω: ${result.data.login.user.email}`);
      }
    } catch (error: any) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}`);
    }
  };

  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏
  const testCreateWheel = async () => {
    const wheelInput: CreateWheelInput = {
      title: `–¢–µ—Å—Ç–æ–≤–∞—è —Ä—É–ª–µ—Ç–∫–∞ ${Date.now()}`,
      description: '–°–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ GraphQL –±—ç–∫–µ–Ω–¥',
      segments: [
        {
          option: '–í–∞—Ä–∏–∞–Ω—Ç 1',
          style: { backgroundColor: '#FF6B6B', textColor: 'white' }
        },
        {
          option: '–í–∞—Ä–∏–∞–Ω—Ç 2', 
          style: { backgroundColor: '#4ECDC4', textColor: 'white' }
        },
        {
          option: '–í–∞—Ä–∏–∞–Ω—Ç 3',
          style: { backgroundColor: '#45B7D1', textColor: 'white' }
        }
      ],
      isPublic: true
    };

    try {
      const result = await createWheel({
        variables: { input: wheelInput }
      });
      
      if (result.data) {
        addResult(`‚úÖ –†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${result.data.createWheel.title} (ID: ${result.data.createWheel.id})`);
        return result.data.createWheel.id;
      }
    } catch (error: any) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏: ${error.message}`);
    }
    return null;
  };

  // –¢–µ—Å—Ç –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏
  const testSpinWheel = async (wheelId: string) => {
    try {
      const result = await spinWheel({
        variables: {
          input: {
            wheelId,
            result: '–í–∞—Ä–∏–∞–Ω—Ç 1',
            participant: '–¢–µ—Å—Ç–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫'
          }
        }
      });
      
      if (result.data) {
        addResult(`‚úÖ –í—Ä–∞—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: ${result.data.spinWheel.result} (ID: ${result.data.spinWheel.id})`);
      }
    } catch (error: any) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è: ${error.message}`);
    }
  };

  // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏
  const testDeleteWheel = async (wheelId: string) => {
    try {
      const result = await deleteWheel({
        variables: { id: wheelId }
      });
      
      if (result.data?.deleteWheel) {
        addResult(`‚úÖ –†—É–ª–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞: ${wheelId}`);
      }
    } catch (error: any) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`);
    }
  };

  // –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
  const runFullTest = async () => {
    clearResults();
    addResult('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GraphQL –±—ç–∫–µ–Ω–¥–∞...');
    
    // 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    addResult('üìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    const wheelId = await testCreateWheel();
    
    if (wheelId) {
      // 2. –¢–µ—Å—Ç –≤—Ä–∞—â–µ–Ω–∏—è
      addResult('üéØ –¢–µ—Å—Ç 2: –í—Ä–∞—â–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏');
      await testSpinWheel(wheelId);
      
      // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫
      addResult('üîÑ –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä—É–ª–µ—Ç–æ–∫');
      await refetchWheels();
      addResult('‚úÖ –°–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω');
      
      // 4. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
      addResult('üóëÔ∏è –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏');
      await testDeleteWheel(wheelId);
    }
    
    addResult('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GraphQL –ë—ç–∫–µ–Ω–¥–∞
        </h1>

        {/* –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">–°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</h2>
          {authLoading ? (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          ) : isAuthenticated ? (
            <div className="text-green-600">
              <p>‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {user?.email}</p>
              <p>–ò–º—è: {user?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
              <p>–ü–ª–∞–Ω: {user?.plan}</p>
              <button
                onClick={logout}
                className="mt-2 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
              >
                –í—ã–π—Ç–∏
              </button>
            </div>
          ) : (
            <div className="text-gray-600">
              <p>‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π)</p>
            </div>
          )}
        </div>

        {/* –§–æ—Ä–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
        {!isAuthenticated && (
          <div className="bg-white rounded-lg shadow p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4">–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="px-3 py-2 border rounded"
              />
              <input
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="px-3 py-2 border rounded"
              />
              <input
                type="text"
                placeholder="–ò–º—è"
                value={name}
                onChange={(e) => setName(e.target.value)}
                className="px-3 py-2 border rounded"
              />
            </div>
            <div className="flex gap-2">
              <button
                onClick={testRegister}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
              >
                –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
              </button>
              <button
                onClick={testLogin}
                className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
              >
                –í—Ö–æ–¥
              </button>
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π</h2>
          <div className="flex flex-wrap gap-2 mb-4">
            <button
              onClick={runFullTest}
              className="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600"
            >
              üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
            </button>
            <button
              onClick={testCreateWheel}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              üìù –°–æ–∑–¥–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É
            </button>
            <button
              onClick={() => refetchWheels()}
              className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
            >
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
            </button>
            <button
              onClick={clearResults}
              className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
            >
              üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            </button>
          </div>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h2>
          <div className="bg-gray-100 p-4 rounded max-h-96 overflow-y-auto">
            {testResults.length === 0 ? (
              <p className="text-gray-500">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</p>
            ) : (
              testResults.map((result, index) => (
                <div key={index} className="mb-1 font-mono text-sm">
                  {result}
                </div>
              ))
            )}
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫ */}
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">
            –†—É–ª–µ—Ç–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            {wheelsLoading && <span className="text-sm text-gray-500 ml-2">(–∑–∞–≥—Ä—É–∑–∫–∞...)</span>}
          </h2>
          
          {wheelsError && (
            <div className="text-red-600 mb-4">
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {wheelsError.message}
            </div>
          )}
          
          {wheelsData?.wheels && wheelsData.wheels.length > 0 ? (
            <div className="grid gap-4">
              {wheelsData.wheels.map((wheel) => (
                <div key={wheel.id} className="border rounded p-4">
                  <h3 className="font-semibold">{wheel.title}</h3>
                  <p className="text-sm text-gray-600">{wheel.description}</p>
                  <p className="text-xs text-gray-500">
                    ID: {wheel.id} | 
                    –°–æ–∑–¥–∞–Ω–æ: {new Date(wheel.createdAt).toLocaleString()} |
                    –°–µ–≥–º–µ–Ω—Ç–æ–≤: {wheel.segments.length} |
                    –í—Ä–∞—â–µ–Ω–∏–π: {wheel.spins.length} |
                    {wheel.isPublic ? '–ü—É–±–ª–∏—á–Ω–∞—è' : '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è'}
                  </p>
                  <div className="mt-2 flex gap-2">
                    <button
                      onClick={() => testSpinWheel(wheel.id)}
                      className="px-3 py-1 bg-green-500 text-white text-sm rounded hover:bg-green-600"
                    >
                      üéØ –í—Ä–∞—â–∞—Ç—å
                    </button>
                    <button
                      onClick={() => testDeleteWheel(wheel.id)}
                      className="px-3 py-1 bg-red-500 text-white text-sm rounded hover:bg-red-600"
                    >
                      üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-gray-500">–†—É–ª–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
          )}
        </div>
      </div>
    </div>
  );
} 