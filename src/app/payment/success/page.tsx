'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { useApolloClient } from '@apollo/client';
import { useMe } from '@/lib/graphql/hooks';
import { getPayment } from '@/lib/yookassa';

export default function PaymentSuccessPage() {
  const [isLoading, setIsLoading] = useState(true);
  const [paymentStatus, setPaymentStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [paymentInfo, setPaymentInfo] = useState<any>(null);
  const [attempts, setAttempts] = useState(0);
  
  const router = useRouter();
  const searchParams = useSearchParams();
  const client = useApolloClient();
  const { data: meData, refetch: refetchMe } = useMe();

  useEffect(() => {
    const checkPaymentStatus = async () => {
      try {
        console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', Object.fromEntries(searchParams.entries()));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        const userData = await refetchMe();
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData?.data?.me);
        
        if (!userData?.data?.me) {
          console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
          setPaymentStatus('error');
          setIsLoading(false);
          return;
        }
        
        // –ï—Å–ª–∏ —É–∂–µ PRO - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö —Å—Ä–∞–∑—É
        if (userData.data.me.plan === 'PRO') {
          console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ PRO —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!');
          setPaymentStatus('success');
          setPaymentInfo({
            status: 'succeeded',
            amount: { value: '400.00' },
            description: '–ü–æ–¥–ø–∏—Å–∫–∞ GIFTY PRO'
          });
          await client.resetStore();
          setIsLoading(false);
          return;
        }
        
        // –ï—Å–ª–∏ –µ—â–µ FREE - –∂–¥–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏...', `–ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/5`);
        
        if (attempts < 5) { // –£–º–µ–Ω—å—à–∏–ª –¥–æ 5 –ø–æ–ø—ã—Ç–æ–∫ (10 —Å–µ–∫—É–Ω–¥)
          setAttempts(prev => prev + 1);
          setTimeout(checkPaymentStatus, 2000);
        } else {
          // –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
          console.log('‚ö†Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –Ω–æ –æ–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–π—Ç–∏');
          setPaymentStatus('success');
          setPaymentInfo({
            status: 'processing',
            amount: { value: '400.00' },
            description: '–ü–æ–¥–ø–∏—Å–∫–∞ GIFTY PRO (–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è)'
          });
          setIsLoading(false);
        }

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
        setPaymentStatus('error');
        setIsLoading(false);
      }
    };

    checkPaymentStatus();
  }, [attempts, searchParams, refetchMe, client]);

  if (isLoading || paymentStatus === 'loading') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center">
        <div className="bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-2xl border border-gray-700/50 p-8 max-w-md w-full mx-4">
          <div className="text-center">
            <div className="w-16 h-16 bg-gradient-to-r from-orange-400 to-pink-400 rounded-full flex items-center justify-center mx-auto mb-4">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
            </div>
            <h1 className="text-2xl font-bold text-white mb-2">
              –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
            </h1>
            <p className="text-gray-300">
              –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∞—à—É PRO –ø–æ–¥–ø–∏—Å–∫—É... 
              <br />
              <span className="text-sm text-gray-400">–ü–æ–ø—ã—Ç–∫–∞ {attempts + 1} –∏–∑ 5</span>
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (paymentStatus === 'error') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center">
        <div className="bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-2xl border border-gray-700/50 p-8 max-w-md w-full mx-4">
          <div className="text-center">
            <div className="w-16 h-16 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </div>
            <h1 className="text-2xl font-bold text-white mb-2">
              –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
            </h1>
            <p className="text-gray-300 mb-6">
              –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
            </p>
            <div className="space-y-3">
              <Link
                href="/payment"
                className="block w-full bg-gradient-to-r from-orange-400 to-pink-400 text-white px-6 py-3 rounded-lg hover:from-orange-500 hover:to-pink-500 transition-all font-medium text-center"
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </Link>
              <Link
                href="/dashboard"
                className="block w-full text-gray-300 hover:text-white px-6 py-3 rounded-lg border border-gray-600 hover:border-gray-500 transition-all font-medium text-center"
              >
                –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å
              </Link>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center">
      <div className="bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-2xl border border-gray-700/50 p-8 max-w-md w-full mx-4">
        <div className="text-center">
          <div className="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          
          <h1 className="text-2xl font-bold text-white mb-2">
            üéâ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!
          </h1>
          
          <p className="text-gray-300 mb-6">
            {paymentInfo?.status === 'processing' 
              ? '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ PRO –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.'
              : '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ PRO –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.'
            }
          </p>

          {paymentInfo?.status === 'processing' && (
            <div className="mb-6 p-4 bg-yellow-500/10 border border-yellow-500/20 rounded-lg">
              <p className="text-yellow-300 text-sm mb-3">
                –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ—ë –≤—Ä—É—á–Ω—É—é:
              </p>
              <button
                onClick={async () => {
                  try {
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ GraphQL
                    const response = await fetch('/api/graphql', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                        query: `mutation { upgradeToPro(period: "MONTHLY") { id plan status } }`
                      })
                    });
                    
                    if (response.ok) {
                      await refetchMe();
                      await client.resetStore();
                      window.location.reload();
                    }
                  } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
                  }
                }}
                className="bg-yellow-500 hover:bg-yellow-600 text-black px-4 py-2 rounded-lg font-medium text-sm transition-colors"
              >
                –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
              </button>
            </div>
          )}

          {paymentInfo && (
            <div className="bg-gray-700/50 rounded-xl p-4 mb-6 text-left">
              <h3 className="text-sm font-semibold text-gray-300 mb-2">–î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:</h3>
              <div className="space-y-1 text-sm text-gray-400">
                <div className="flex justify-between">
                  <span>–°—É–º–º–∞:</span>
                  <span className="text-white">{paymentInfo.amount.value} ‚ÇΩ</span>
                </div>
                <div className="flex justify-between">
                  <span>–°—Ç–∞—Ç—É—Å:</span>
                  <span className={paymentInfo.status === 'processing' ? 'text-yellow-400' : 'text-green-400'}>
                    {paymentInfo.status === 'processing' ? '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è' : '–û–ø–ª–∞—á–µ–Ω–æ'}
                  </span>
                </div>
                {paymentInfo.description && (
                  <div className="flex justify-between">
                    <span>–û–ø–∏—Å–∞–Ω–∏–µ:</span>
                    <span className="text-white text-right">{paymentInfo.description}</span>
                  </div>
                )}
              </div>
            </div>
          )}

          <div className="space-y-3">
            <Link
              href="/dashboard"
              className="block w-full bg-gradient-to-r from-orange-400 to-pink-400 text-white px-6 py-3 rounded-lg hover:from-orange-500 hover:to-pink-500 transition-all font-medium"
            >
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            </Link>
            <Link
              href="/"
              className="block w-full text-gray-300 hover:text-white px-6 py-3 rounded-lg border border-gray-600 hover:border-gray-500 transition-all font-medium"
            >
              –ù–∞ –≥–ª–∞–≤–Ω—É—é
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}